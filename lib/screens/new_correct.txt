// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/spiral_evolution_chart.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   bool _isInitializing = true;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//   bool _isSelecting = false;
//   List<String> selectedMessageIds = [];
//   final ScrollController _scrollController = ScrollController();

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;
//   DateTime? _lastTaskCheck;

//   @override
//   void initState() {
//     super.initState();
//     _initializeData();
//   }

//   @override
//   void dispose() {
//     _scrollController.dispose();
//     super.dispose();
//   }

//   Future<void> _initializeData() async {
//     setState(() => _isInitializing = true);
//     await _requestPermissions();
//     await _loadMessages();
//     await _checkAndAddDailyTask();
//     setState(() => _isInitializing = false);

//     // Scroll to bottom after messages are loaded
//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       if (_scrollController.hasClients) {
//         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//       }
//     });
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _checkAndAddDailyTask() async {
//     final now = DateTime.now();
//     if (_lastTaskCheck != null &&
//         now.difference(_lastTaskCheck!) < Duration(minutes: 5)) {
//       return; // Skip if we checked recently
//     }
//     _lastTaskCheck = now;

//     final today = DateTime.now();
//     final todayStr = DateFormat('yyyy-MM-dd').format(today);

//     try {
//       // Query Firestore directly for today's task
//       final querySnapshot =
//           await firestore
//               .collection('users')
//               .doc(user!.uid)
//               .collection('mergedMessages')
//               .where('type', isEqualTo: 'daily-task')
//               .where(
//                 'timestamp',
//                 isGreaterThanOrEqualTo: DateTime(
//                   today.year,
//                   today.month,
//                   today.day,
//                 ),
//               )
//               .where(
//                 'timestamp',
//                 isLessThan: DateTime(today.year, today.month, today.day + 1),
//               )
//               .limit(1)
//               .get();

//       if (querySnapshot.docs.isEmpty) {
//         await _addDailyTaskMessage();
//       }
//     } catch (e) {
//       debugPrint('Error checking for daily task: $e');
//       // Fallback to checking local messages if Firestore query fails
//       final hasDailyTask = messages.any((msg) {
//         if (msg['type'] == 'daily-task') {
//           DateTime timestamp;
//           if (msg['timestamp'] is Timestamp) {
//             timestamp = (msg['timestamp'] as Timestamp).toDate();
//           } else if (msg['timestamp'] is String) {
//             timestamp = DateTime.parse(msg['timestamp']);
//           } else {
//             timestamp = msg['timestamp'];
//           }
//           return DateFormat('yyyy-MM-dd').format(timestamp) == todayStr;
//         }
//         return false;
//       });

//       if (!hasDailyTask) {
//         await _addDailyTaskMessage();
//       }
//     }
//   }

//   Future<void> _addDailyTaskMessage() async {
//     try {
//       final response = await http.get(
//         Uri.parse('http://10.212.185.126:5000/daily_task?user_id=${user!.uid}'),
//       );

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//         // Normalize to start of day to ensure consistent comparison
//         final today = DateTime(now.year, now.month, now.day);

//         final taskMessage = {
//           'type': 'daily-task',
//           'message': data['task'] ?? 'Your daily reflection task',
//           'timestamp': today, // Use normalized date
//           'task_id': data['timestamp'],
//           'completed': data['completed'] ?? false,
//         };

//         await _storeMessage(taskMessage);
//         await _loadMessages(); // Refresh messages
//       }
//     } catch (e) {
//       debugPrint('Error loading daily task: $e');
//     }
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       // Find the last spiral stage
//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> _completeTask(String taskId) async {
//     try {
//       final response = await http.post(
//         Uri.parse('http://10.212.185.126:5000/complete_task'),
//         headers: {'Content-Type': 'application/json'},
//         body: jsonEncode({'user_id': user!.uid, 'task_id': taskId}),
//       );

//       if (response.statusCode == 200) {
//         // Update the message in the list
//         setState(() {
//           final taskIndex = messages.indexWhere(
//             (msg) => msg['task_id'] == taskId && msg['type'] == 'daily-task',
//           );
//           if (taskIndex != -1) {
//             messages[taskIndex]['completed'] = true;
//           }
//         });
//       }
//     } catch (e) {
//       debugPrint('Error completing task: $e');
//     }
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://10.212.185.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage != null
//                   ? (selectedMessage?['question'] ??
//                       selectedMessage?['response'] ??
//                       selectedMessage?['user'] ??
//                       selectedMessage?['message'] ??
//                       "")
//                   : "",
//           "is_spiral_reply":
//               selectedMessage != null && selectedMessage?['type'] == 'spiral',
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         setState(() {
//           messages.add({
//             'type': 'error',
//             'message':
//                 'Server error: ${response.statusCode} - ${response.body}',
//             'timestamp': now,
//           });
//         });
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Network error: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//       // Scroll to bottom after sending a message
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     final docRef = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add({...msg, 'id': docRef.id}));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("❌ Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("❌ Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     setState(() => isLoading = true);
//     final uri = Uri.parse("http://10.212.185.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri);
//     request.fields['last_stage'] = lastStage ?? '';
//     request.fields['reply_to'] =
//         selectedMessage != null
//             ? (selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "")
//             : "";
//     request.fields['is_spiral_reply'] =
//         (selectedMessage != null && selectedMessage?['type'] == 'spiral')
//             .toString();
//     request.files.add(
//       await http.MultipartFile.fromPath(
//         'file',
//         file.path,
//         contentType: MediaType('audio', 'wav'),
//       ),
//     );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'transcription': data['transcription'] ?? '',
//           'type': data['mode'],
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'] ?? '';
//         } else {
//           msg['stage'] = data['stage'] ?? '';
//           msg['question'] = data['question'] ?? '';
//           msg['growth'] = data['growth'] ?? '';
//           msg['evolution'] = data['evolution'] ?? '';
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Voice processing failed: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() => isLoading = false);
//       // Scroll to bottom after sending a voice message
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   List<Map<String, dynamic>> getMessagesWithDateHeaders() {
//     List<Map<String, dynamic>> processed = [];
//     String? lastDate;

//     for (final msg in messages) {
//       final timestamp =
//           msg['timestamp'] is Timestamp
//               ? (msg['timestamp'] as Timestamp).toDate()
//               : msg['timestamp'] is String
//               ? DateTime.parse(msg['timestamp'])
//               : DateTime.now();
//       final dateStr = DateFormat('yyyy-MM-dd').format(timestamp);

//       if (lastDate != dateStr) {
//         processed.add({'type': 'date-header', 'date': timestamp});
//         lastDate = dateStr;
//       }

//       processed.add(msg);
//     }

//     return processed;
//   }

//   void _toggleMessageSelection(String messageId) {
//     setState(() {
//       if (selectedMessageIds.contains(messageId)) {
//         selectedMessageIds.remove(messageId);
//       } else {
//         selectedMessageIds.add(messageId);
//       }
//       _isSelecting = selectedMessageIds.isNotEmpty;
//     });
//   }

//   void _cancelSelection() {
//     setState(() {
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   void _setReplyToMessage(Map<String, dynamic> message) {
//     setState(() {
//       selectedMessage = message;
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   PreferredSizeWidget _buildSelectionAppBar() {
//     return AppBar(
//       leading: IconButton(
//         icon: const Icon(Icons.close),
//         onPressed: _cancelSelection,
//       ),
//       title: Text('${selectedMessageIds.length} selected'),
//       actions: [
//         IconButton(
//           icon: const Icon(Icons.reply),
//           onPressed: () {
//             if (selectedMessageIds.length == 1) {
//               final message = messages.firstWhere(
//                 (m) => m['id'] == selectedMessageIds.first,
//                 orElse: () => {},
//               );
//               if (message.isNotEmpty) {
//                 _setReplyToMessage(message);
//               }
//             }
//           },
//         ),
//       ],
//     );
//   }

//   Widget _buildReplyPreview() {
//     if (selectedMessage == null) return const SizedBox.shrink();

//     final replyText =
//         selectedMessage?['question'] ??
//         selectedMessage?['response'] ??
//         selectedMessage?['user'] ??
//         selectedMessage?['message'] ??
//         "";

//     return Container(
//       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       decoration: BoxDecoration(
//         color: Colors.grey[200],
//         border: Border(
//           left: BorderSide(
//             color:
//                 selectedMessage?['type'] == 'spiral'
//                     ? Colors.orange
//                     : Colors.blue,
//             width: 4,
//           ),
//         ),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               Text(
//                 selectedMessage?['type'] == 'spiral'
//                     ? '🌀 Replying to Spiral Stage'
//                     : '💬 Replying to Message',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color:
//                       selectedMessage?['type'] == 'spiral'
//                           ? Colors.orange
//                           : Colors.blue,
//                 ),
//               ),
//               IconButton(
//                 icon: const Icon(Icons.close, size: 20),
//                 onPressed: () {
//                   setState(() {
//                     selectedMessage = null;
//                   });
//                 },
//               ),
//             ],
//           ),
//           const SizedBox(height: 4),
//           Container(
//             constraints: const BoxConstraints(maxHeight: 150),
//             child: SingleChildScrollView(
//               child: Text(replyText, style: const TextStyle(fontSize: 14)),
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     if (msg['type'] == 'date-header') {
//       return Center(
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 10),
//           padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: Text(
//             DateFormat('EEEE, MMM d, yyyy').format(msg['date']),
//             style: const TextStyle(
//               fontSize: 12,
//               color: Colors.black87,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//         ),
//       );
//     }

//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : msg['timestamp'] is String
//             ? DateTime.parse(msg['timestamp'])
//             : DateTime.now();
//     final isSelected = selectedMessageIds.contains(msg['id']);
//     final isReply = msg['reply_to_id'] != null;

//     return GestureDetector(
//       onLongPress: () {
//         if (!_isSelecting) {
//           setState(() {
//             _isSelecting = true;
//             selectedMessageIds.add(msg['id']);
//           });
//         }
//       },
//       onTap: () {
//         if (_isSelecting) {
//           _toggleMessageSelection(msg['id']);
//         }
//       },
//       child: Container(
//         margin: const EdgeInsets.symmetric(vertical: 4),
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue[50] : Colors.transparent,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           children: [
//             if (isReply && msg['reply_to'] != null)
//               Padding(
//                 padding: const EdgeInsets.only(left: 16, top: 8, right: 16),
//                 child: Container(
//                   padding: const EdgeInsets.all(8),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[100],
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.grey[300]!),
//                   ),
//                   child: Row(
//                     children: [
//                       Container(
//                         width: 4,
//                         height: 40,
//                         color: Colors.grey,
//                         margin: const EdgeInsets.only(right: 8),
//                       ),
//                       Expanded(
//                         child: Text(
//                           msg['reply_to'],
//                           maxLines: 2,
//                           overflow: TextOverflow.ellipsis,
//                           style: const TextStyle(
//                             fontSize: 12,
//                             color: Colors.grey,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'daily-task')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: Colors.purple[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           const Text(
//                             "📝 Inner Compass",
//                             style: TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 8),
//                           Text(msg['message'] ?? ''),
//                           const SizedBox(height: 8),
//                           // Row(
//                           //   children: [
//                           //     Checkbox(
//                           //       value: msg['completed'] ?? false,
//                           //       onChanged: (val) {
//                           //         if (!(msg['completed'] ?? false)) {
//                           //           _completeTask(msg['task_id']);
//                           //         }
//                           //       },
//                           //     ),
//                           // Text(
//                           //   msg['completed'] ?? false
//                           //       ? "Completed"
//                           //       : "Mark as completed",
//                           // ),
//                           //   ],
//                           // ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] != null && msg['user'] != '[Voice]')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.blue[300]
//                                 : isReply
//                                 ? Colors.blue[100]
//                                 : Colors.blue[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.end,
//                         children: [
//                           Text(
//                             msg['user'] ?? '',
//                             style: const TextStyle(color: Colors.black),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] == '[Voice]' && msg['audioPath'] != null)
//               Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 16),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(12),
//                       decoration: BoxDecoration(
//                         color: Colors.blueGrey[50],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                         border: Border.all(color: Colors.blueGrey[100]!),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Row(
//                             children: [
//                               Icon(
//                                 Icons.mic,
//                                 color: Colors.blueGrey[600],
//                                 size: 20,
//                               ),
//                               const SizedBox(width: 8),
//                               Text(
//                                 "Voice Message",
//                                 style: TextStyle(
//                                   fontWeight: FontWeight.bold,
//                                   color: Colors.blueGrey[800],
//                                 ),
//                               ),
//                             ],
//                           ),
//                           const SizedBox(height: 8),
//                           AudioPlayerWidget(filePath: msg['audioPath']),
//                           if (msg['transcription'] != null &&
//                               msg['transcription'].isNotEmpty)
//                             Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 const SizedBox(height: 8),
//                                 Text(
//                                   "Transcription:",
//                                   style: TextStyle(
//                                     fontSize: 12,
//                                     fontWeight: FontWeight.bold,
//                                     color: Colors.blueGrey[800],
//                                   ),
//                                 ),
//                                 const SizedBox(height: 4),
//                                 Text(
//                                   '"${msg['transcription']}"',
//                                   style: const TextStyle(
//                                     fontSize: 12,
//                                     color: Colors.black87,
//                                   ),
//                                 ),
//                               ],
//                             ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'chat')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.grey[300]
//                                 : isReply
//                                 ? Colors.grey[100]
//                                 : Colors.grey[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomRight: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(msg['response'] ?? ''),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'spiral')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.orange[200]
//                                 : isReply
//                                 ? Colors.orange[50]
//                                 : Colors.orange[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(
//                             "🌀 Stage: ${msg['stage'] ?? ''}",
//                             style: const TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 6),
//                           Text(
//                             "❓ ${msg['question'] ?? ''}",
//                             style: const TextStyle(
//                               fontStyle: FontStyle.italic,
//                               fontSize: 14,
//                             ),
//                           ),
//                           if ((msg['growth'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 '"${msg['growth']}"',
//                                 style: const TextStyle(
//                                   fontSize: 13,
//                                   fontStyle: FontStyle.italic,
//                                   color: Colors.black,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                           if ((msg['evolution'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 msg['evolution'],
//                                 style: const TextStyle(
//                                   color: Colors.green,
//                                   fontWeight: FontWeight.w600,
//                                 ),
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'error')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: Colors.red[100],
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Text(
//                         "❌ ${msg['message'] ?? 'Error'}",
//                         style: const TextStyle(color: Colors.red),
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     if (_isInitializing) {
//       return Scaffold(
//         body: Center(
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               CircularProgressIndicator(),
//               SizedBox(height: 20),
//               Text('Loading your reflections...'),
//             ],
//           ),
//         ),
//       );
//     }

//     return Scaffold(
//       appBar:
//           _isSelecting
//               ? _buildSelectionAppBar()
//               : AppBar(
//                 title: const Text("Reflect & Chat"),
//                 actions: [
//                   IconButton(
//                     icon: const Icon(Icons.show_chart),
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder:
//                               (context) => const SpiralEvolutionChartScreen(),
//                         ),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           final displayMessages = getMessagesWithDateHeaders();
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 _buildReplyPreview(),
//                 Expanded(
//                   child: ListView.builder(
//                     controller: _scrollController,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: displayMessages.length,
//                     itemBuilder:
//                         (context, index) =>
//                             buildChatBubble(displayMessages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.only(
//                     left: 12,
//                     right: 12,
//                     top: 10,
//                     bottom: 20,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText:
//                                 selectedMessage != null
//                                     ? "Replying..."
//                                     : "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;
//   Duration? _duration;
//   Duration? _position;

//   @override
//   void initState() {
//     super.initState();
//     _player.durationStream.listen((duration) {
//       setState(() => _duration = duration);
//     });
//     _player.positionStream.listen((position) {
//       setState(() => _position = position);
//     });
//     _player.playerStateStream.listen((state) {
//       if (state.processingState == ProcessingState.completed) {
//         setState(() => _isPlaying = false);
//       }
//     });
//   }

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       await _player.setFilePath(widget.filePath);
//       await _player.play();
//     }
//     setState(() => _isPlaying = !_isPlaying);
//   }

//   String _formatDuration(Duration? duration) {
//     if (duration == null) return '--:--';
//     final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
//     final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
//     return '$minutes:$seconds';
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(
//             _isPlaying ? Icons.pause : Icons.play_arrow,
//             color: Colors.blueGrey[800],
//             size: 24,
//           ),
//           onPressed: _togglePlayPause,
//         ),
//         Expanded(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               SliderTheme(
//                 data: SliderTheme.of(context).copyWith(
//                   activeTrackColor: Colors.blueGrey[600],
//                   inactiveTrackColor: Colors.blueGrey[200],
//                   trackHeight: 2,
//                   thumbColor: Colors.blueGrey[600],
//                   thumbShape: const RoundSliderThumbShape(
//                     enabledThumbRadius: 6,
//                   ),
//                   overlayColor: Colors.blueGrey.withAlpha(32),
//                   overlayShape: const RoundSliderOverlayShape(
//                     overlayRadius: 12,
//                   ),
//                 ),
//                 child: Slider(
//                   value: (_position ?? Duration.zero).inMilliseconds.toDouble(),
//                   min: 0,
//                   max: _duration?.inMilliseconds.toDouble() ?? 1,
//                   onChanged: (value) {
//                     _player.seek(Duration(milliseconds: value.toInt()));
//                   },
//                 ),
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text(
//                     _formatDuration(_position),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                   Text(
//                     _formatDuration(_duration),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ],
//           ),
//         ),
//       ],
//     );
//   }
// // }


// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/spiral_evolution_chart.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   bool _isInitializing = true;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//   bool _isSelecting = false;
//   List<String> selectedMessageIds = [];
//   final ScrollController _scrollController = ScrollController();

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;
//   DateTime? _lastTaskCheck;

//   @override
//   void initState() {
//     super.initState();
//     _initializeData();
//   }

//   @override
//   void dispose() {
//     _scrollController.dispose();
//     super.dispose();
//   }

//   Future<void> _initializeData() async {
//     setState(() => _isInitializing = true);
//     await _requestPermissions();
//     await _loadMessages();
//     await _checkAndAddDailyTask();
//     setState(() => _isInitializing = false);

//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       if (_scrollController.hasClients) {
//         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//       }
//     });
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _checkAndAddDailyTask() async {
//     final now = DateTime.now();
//     if (_lastTaskCheck != null &&
//         now.difference(_lastTaskCheck!) < Duration(minutes: 5)) {
//       return;
//     }
//     _lastTaskCheck = now;

//     final today = DateTime.now();
//     final todayStr = DateFormat('yyyy-MM-dd').format(today);

//     try {
//       final querySnapshot = await firestore
//           .collection('users')
//           .doc(user!.uid)
//           .collection('mergedMessages')
//           .where('type', isEqualTo: 'daily-task')
//           .where(
//             'timestamp',
//             isGreaterThanOrEqualTo: DateTime(
//               today.year,
//               today.month,
//               today.day,
//             ),
//           )
//           .where(
//             'timestamp',
//             isLessThan: DateTime(today.year, today.month, today.day + 1),
//           )
//           .limit(1)
//           .get();

//       if (querySnapshot.docs.isEmpty) {
//         await _addDailyTaskMessage();
//       }
//     } catch (e) {
//       debugPrint('Error checking for daily task: $e');
//       final hasDailyTask = messages.any((msg) {
//         if (msg['type'] == 'daily-task') {
//           DateTime timestamp;
//           if (msg['timestamp'] is Timestamp) {
//             timestamp = (msg['timestamp'] as Timestamp).toDate();
//           } else if (msg['timestamp'] is String) {
//             timestamp = DateTime.parse(msg['timestamp']);
//           } else {
//             timestamp = msg['timestamp'];
//           }
//           return DateFormat('yyyy-MM-dd').format(timestamp) == todayStr;
//         }
//         return false;
//       });

//       if (!hasDailyTask) {
//         await _addDailyTaskMessage();
//       }
//     }
//   }

//   Future<void> _addDailyTaskMessage() async {
//     try {
//       final response = await http.get(
//         Uri.parse('http://10.212.185.126:5000/daily_task?user_id=${user!.uid}'),
//       );

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//         final today = DateTime(now.year, now.month, now.day);

//         final taskMessage = {
//           'type': 'daily-task',
//           'message': data['task'] ?? 'Your daily reflection task',
//           'timestamp': today,
//           'task_id': data['timestamp'],
//           'completed': data['completed'] ?? false,
//         };

//         await _storeMessage(taskMessage);
//         await _loadMessages();
//       }
//     } catch (e) {
//       debugPrint('Error loading daily task: $e');
//     }
//   }

//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();

//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://10.212.185.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to": selectedMessage != null
//               ? (selectedMessage?['question'] ??
//                   selectedMessage?['response'] ??
//                   selectedMessage?['user'] ??
//                   selectedMessage?['message'] ??
//                   "")
//               : "",
//           "is_spiral_reply":
//               selectedMessage != null && selectedMessage?['type'] == 'spiral',
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to': selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         setState(() {
//           messages.add({
//             'type': 'error',
//             'message': 'Server error: ${response.statusCode} - ${response.body}',
//             'timestamp': now,
//           });
//         });
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Network error: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     final docRef = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add({...msg, 'id': docRef.id}));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("❌ Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("❌ Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     setState(() => isLoading = true);
//     final uri = Uri.parse("http://10.212.185.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri);
//     request.fields['last_stage'] = lastStage ?? '';
//     request.fields['reply_to'] = selectedMessage != null
//         ? (selectedMessage?['question'] ??
//             selectedMessage?['response'] ??
//             selectedMessage?['user'] ??
//             selectedMessage?['message'] ??
//             "")
//         : "";
//     request.fields['is_spiral_reply'] =
//         (selectedMessage != null && selectedMessage?['type'] == 'spiral')
//             .toString();
//     request.files.add(
//       await http.MultipartFile.fromPath(
//         'file',
//         file.path,
//         contentType: MediaType('audio', 'wav'),
//       ),
//     );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'transcription': data['transcription'] ?? '',
//           'type': data['mode'],
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to': selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//         } else {
//           msg['stage'] = data['stage'] ?? '';
//           msg['question'] = data['question'] ?? '';
//           msg['growth'] = data['growth'] ?? '';
//           msg['evolution'] = data['evolution'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Voice processing failed: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() => isLoading = false);
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   List<Map<String, dynamic>> getMessagesWithDateHeaders() {
//     List<Map<String, dynamic>> processed = [];
//     String? lastDate;

//     for (final msg in messages) {
//       final timestamp = msg['timestamp'] is Timestamp
//           ? (msg['timestamp'] as Timestamp).toDate()
//           : msg['timestamp'] is String
//               ? DateTime.parse(msg['timestamp'])
//               : DateTime.now();
//       final dateStr = DateFormat('yyyy-MM-dd').format(timestamp);

//       if (lastDate != dateStr) {
//         processed.add({'type': 'date-header', 'date': timestamp});
//         lastDate = dateStr;
//       }

//       processed.add(msg);
//     }

//     return processed;
//   }

//   void _toggleMessageSelection(String messageId) {
//     setState(() {
//       if (selectedMessageIds.contains(messageId)) {
//         selectedMessageIds.remove(messageId);
//       } else {
//         selectedMessageIds.add(messageId);
//       }
//       _isSelecting = selectedMessageIds.isNotEmpty;
//     });
//   }

//   void _cancelSelection() {
//     setState(() {
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   void _setReplyToMessage(Map<String, dynamic> message) {
//     setState(() {
//       selectedMessage = message;
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   PreferredSizeWidget _buildSelectionAppBar() {
//     return AppBar(
//       leading: IconButton(
//         icon: const Icon(Icons.close),
//         onPressed: _cancelSelection,
//       ),
//       title: Text('${selectedMessageIds.length} selected'),
//       actions: [
//         IconButton(
//           icon: const Icon(Icons.reply),
//           onPressed: () {
//             if (selectedMessageIds.length == 1) {
//               final message = messages.firstWhere(
//                 (m) => m['id'] == selectedMessageIds.first,
//                 orElse: () => {},
//               );
//               if (message.isNotEmpty) {
//                 _setReplyToMessage(message);
//               }
//             }
//           },
//         ),
//       ],
//     );
//   }

//   Widget _buildReplyPreview() {
//     if (selectedMessage == null) return const SizedBox.shrink();

//     final replyText = selectedMessage?['question'] ??
//         selectedMessage?['response'] ??
//         selectedMessage?['user'] ??
//         selectedMessage?['message'] ??
//         "";

//     return Container(
//       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       decoration: BoxDecoration(
//         color: Colors.grey[200],
//         border: Border(
//           left: BorderSide(
//             color: selectedMessage?['type'] == 'spiral'
//                 ? Colors.orange
//                 : Colors.blue,
//             width: 4,
//           ),
//         ),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               Text(
//                 selectedMessage?['type'] == 'spiral'
//                     ? '🌀 Replying to Spiral Stage'
//                     : '💬 Replying to Message',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color: selectedMessage?['type'] == 'spiral'
//                       ? Colors.orange
//                       : Colors.blue,
//                 ),
//               ),
//               IconButton(
//                 icon: const Icon(Icons.close, size: 20),
//                 onPressed: () {
//                   setState(() {
//                     selectedMessage = null;
//                   });
//                 },
//               ),
//             ],
//           ),
//           const SizedBox(height: 4),
//           Container(
//             constraints: const BoxConstraints(maxHeight: 150),
//             child: SingleChildScrollView(
//               child: Text(replyText, style: const TextStyle(fontSize: 14)),
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     if (msg['type'] == 'date-header') {
//       return Center(
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 10),
//           padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: Text(
//             DateFormat('EEEE, MMM d, yyyy').format(msg['date']),
//             style: const TextStyle(
//               fontSize: 12,
//               color: Colors.black87,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//         ),
//       );
//     }

//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : msg['timestamp'] is String
//             ? DateTime.parse(msg['timestamp'])
//             : DateTime.now();
//     final isSelected = selectedMessageIds.contains(msg['id']);
//     final isReply = msg['reply_to_id'] != null;

//     return GestureDetector(
//       onLongPress: () {
//         if (!_isSelecting) {
//           setState(() {
//             _isSelecting = true;
//             selectedMessageIds.add(msg['id']);
//           });
//         }
//       },
//       onTap: () {
//         if (_isSelecting) {
//           _toggleMessageSelection(msg['id']);
//         }
//       },
//       child: Container(
//         margin: const EdgeInsets.symmetric(vertical: 4),
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue[50] : Colors.transparent,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           children: [
//             if (isReply && msg['reply_to'] != null)
//               Padding(
//                 padding: const EdgeInsets.only(left: 16, top: 8, right: 16),
//                 child: Container(
//                   padding: const EdgeInsets.all(8),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[100],
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.grey[300]!),
//                   ),
//                   child: Row(
//                     children: [
//                       Container(
//                         width: 4,
//                         height: 40,
//                         color: Colors.grey,
//                         margin: const EdgeInsets.only(right: 8),
//                       ),
//                       Expanded(
//                         child: Text(
//                           msg['reply_to'],
//                           maxLines: 2,
//                           overflow: TextOverflow.ellipsis,
//                           style: const TextStyle(
//                             fontSize: 12,
//                             color: Colors.grey,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'daily-task')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: Colors.purple[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           const Text(
//                             "📝 Inner Compass",
//                             style: TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 8),
//                           Text(msg['message'] ?? ''),
//                           const SizedBox(height: 8),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] != null && msg['user'] != '[Voice]')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: isSelected
//                             ? Colors.blue[300]
//                             : isReply
//                                 ? Colors.blue[100]
//                                 : Colors.blue[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.end,
//                         children: [
//                           Text(
//                             msg['user'] ?? '',
//                             style: const TextStyle(color: Colors.black),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] == '[Voice]' && msg['audioPath'] != null)
//               Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 16),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(12),
//                       decoration: BoxDecoration(
//                         color: Colors.blueGrey[50],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                         border: Border.all(color: Colors.blueGrey[100]!),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Row(
//                             children: [
//                               Icon(
//                                 Icons.mic,
//                                 color: Colors.blueGrey[600],
//                                 size: 20,
//                               ),
//                               const SizedBox(width: 8),
//                               Text(
//                                 "Voice Message",
//                                 style: TextStyle(
//                                   fontWeight: FontWeight.bold,
//                                   color: Colors.blueGrey[800],
//                                 ),
//                               ),
//                             ],
//                           ),
//                           const SizedBox(height: 8),
//                           AudioPlayerWidget(filePath: msg['audioPath']),
//                           if (msg['transcription'] != null &&
//                               msg['transcription'].isNotEmpty)
//                             Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 const SizedBox(height: 8),
//                                 Text(
//                                   "Transcription:",
//                                   style: TextStyle(
//                                     fontSize: 12,
//                                     fontWeight: FontWeight.bold,
//                                     color: Colors.blueGrey[800],
//                                   ),
//                                 ),
//                                 const SizedBox(height: 4),
//                                 Text(
//                                   '"${msg['transcription']}"',
//                                   style: const TextStyle(
//                                     fontSize: 12,
//                                     color: Colors.black87,
//                                   ),
//                                 ),
//                               ],
//                             ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'chat')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: isSelected
//                             ? Colors.grey[300]
//                             : isReply
//                                 ? Colors.grey[100]
//                                 : Colors.grey[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomRight: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(msg['response'] ?? ''),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'spiral')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: isSelected
//                             ? Colors.orange[200]
//                             : isReply
//                                 ? Colors.orange[50]
//                                 : Colors.orange[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(
//                             "🌀 Stage: ${msg['stage'] ?? ''}",
//                             style: const TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 6),
//                           Text(
//                             "❓ ${msg['question'] ?? ''}",
//                             style: const TextStyle(
//                               fontStyle: FontStyle.italic,
//                               fontSize: 14,
//                             ),
//                           ),
//                           if ((msg['growth'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 '"${msg['growth']}"',
//                                 style: const TextStyle(
//                                   fontSize: 13,
//                                   fontStyle: FontStyle.italic,
//                                   color: Colors.black,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                           if ((msg['evolution'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 msg['evolution'],
//                                 style: const TextStyle(
//                                   color: Colors.green,
//                                   fontWeight: FontWeight.w600,
//                                 ),
//                               ),
//                             ),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'error')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: Colors.red[100],
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Text(
//                         "❌ ${msg['message'] ?? 'Error'}",
//                         style: const TextStyle(color: Colors.red),
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     if (_isInitializing) {
//       return Scaffold(
//         body: Center(
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               CircularProgressIndicator(),
//               SizedBox(height: 20),
//               Text('Loading your reflections...'),
//             ],
//           ),
//         ),
//       );
//     }

//     return Scaffold(
//       appBar: _isSelecting
//           ? _buildSelectionAppBar()
//           : AppBar(
//               title: const Text("Reflect & Chat"),
//               actions: [
//                 IconButton(
//                   icon: const Icon(Icons.show_chart),
//                   onPressed: () {
//                     Navigator.push(
//                       context,
//                       MaterialPageRoute(
//                         builder: (context) => const SpiralEvolutionChartScreen(),
//                       ),
//                     );
//                   },
//                 ),
//               ],
//             ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           final displayMessages = getMessagesWithDateHeaders();
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 _buildReplyPreview(),
//                 Expanded(
//                   child: ListView.builder(
//                     controller: _scrollController,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: displayMessages.length,
//                     itemBuilder: (context, index) =>
//                         buildChatBubble(displayMessages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.only(
//                     left: 12,
//                     right: 12,
//                     top: 10,
//                     bottom: 20,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: selectedMessage != null
//                                 ? "Replying..."
//                                 : "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording
//                               ? Icons.stop_circle_outlined
//                               : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed: _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed: isLoading ? null : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;
//   Duration? _duration;
//   Duration? _position;

//   @override
//   void initState() {
//     super.initState();
//     _player.durationStream.listen((duration) {
//       setState(() => _duration = duration);
//     });
//     _player.positionStream.listen((position) {
//       setState(() => _position = position);
//     });
//     _player.playerStateStream.listen((state) {
//       if (state.processingState == ProcessingState.completed) {
//         setState(() => _isPlaying = false);
//       }
//     });
//   }

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       try {
//         if (widget.filePath.startsWith('http')) {
//           await _player.setUrl(widget.filePath);
//         } else {
//           await _player.setFilePath(widget.filePath);
//         }
//         await _player.play();
//       } catch (e) {
//         debugPrint('Error playing audio: $e');
//       }
//     }
//     setState(() => _isPlaying = !_isPlaying);
//   }

//   String _formatDuration(Duration? duration) {
//     if (duration == null) return '--:--';
//     final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
//     final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
//     return '$minutes:$seconds';
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(
//             _isPlaying ? Icons.pause : Icons.play_arrow,
//             color: Colors.blueGrey[800],
//             size: 24,
//           ),
//           onPressed: _togglePlayPause,
//         ),
//         Expanded(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               SliderTheme(
//                 data: SliderTheme.of(context).copyWith(
//                   activeTrackColor: Colors.blueGrey[600],
//                   inactiveTrackColor: Colors.blueGrey[200],
//                   trackHeight: 2,
//                   thumbColor: Colors.blueGrey[600],
//                   thumbShape: const RoundSliderThumbShape(
//                     enabledThumbRadius: 6,
//                   ),
//                   overlayColor: Colors.blueGrey.withAlpha(32),
//                   overlayShape: const RoundSliderOverlayShape(
//                     overlayRadius: 12,
//                   ),
//                 ),
//                 child: Slider(
//                   value: (_position ?? Duration.zero).inMilliseconds.toDouble(),
//                   min: 0,
//                   max: _duration?.inMilliseconds.toDouble() ?? 1,
//                   onChanged: (value) {
//                     _player.seek(Duration(milliseconds: value.toInt()));
//                   },
//                 ),
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text(
//                     _formatDuration(_position),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                   Text(
//                     _formatDuration(_duration),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ],
//           ),
//         ),
//       ],
//     );
//   }
// }


// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/spiral_evolution_chart.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   bool _isInitializing = true;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//   bool _isSelecting = false;
//   List<String> selectedMessageIds = [];
//   final ScrollController _scrollController = ScrollController();

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;
//   DateTime? _lastTaskCheck;

//   @override
//   void initState() {
//     super.initState();
//     _initializeData();
//   }

//   @override
//   void dispose() {
//     _scrollController.dispose();
//     super.dispose();
//   }

//   Future<void> _initializeData() async {
//     setState(() => _isInitializing = true);
//     await _requestPermissions();
//     await _loadMessages();
//     await _checkAndAddDailyTask();
//     setState(() => _isInitializing = false);

//     // Scroll to bottom after messages are loaded
//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       if (_scrollController.hasClients) {
//         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//       }
//     });
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _checkAndAddDailyTask() async {
//     final now = DateTime.now();
//     if (_lastTaskCheck != null &&
//         now.difference(_lastTaskCheck!) < Duration(minutes: 5)) {
//       return; // Skip if we checked recently
//     }
//     _lastTaskCheck = now;

//     final today = DateTime.now();
//     final todayStr = DateFormat('yyyy-MM-dd').format(today);

//     try {
//       // Query Firestore directly for today's task
//       final querySnapshot =
//           await firestore
//               .collection('users')
//               .doc(user!.uid)
//               .collection('mergedMessages')
//               .where('type', isEqualTo: 'daily-task')
//               .where(
//                 'timestamp',
//                 isGreaterThanOrEqualTo: DateTime(
//                   today.year,
//                   today.month,
//                   today.day,
//                 ),
//               )
//               .where(
//                 'timestamp',
//                 isLessThan: DateTime(today.year, today.month, today.day + 1),
//               )
//               .limit(1)
//               .get();

//       if (querySnapshot.docs.isEmpty) {
//         await _addDailyTaskMessage();
//       }
//     } catch (e) {
//       debugPrint('Error checking for daily task: $e');
//       // Fallback to checking local messages if Firestore query fails
//       final hasDailyTask = messages.any((msg) {
//         if (msg['type'] == 'daily-task') {
//           DateTime timestamp;
//           if (msg['timestamp'] is Timestamp) {
//             timestamp = (msg['timestamp'] as Timestamp).toDate();
//           } else if (msg['timestamp'] is String) {
//             timestamp = DateTime.parse(msg['timestamp']);
//           } else {
//             timestamp = msg['timestamp'];
//           }
//           return DateFormat('yyyy-MM-dd').format(timestamp) == todayStr;
//         }
//         return false;
//       });

//       if (!hasDailyTask) {
//         await _addDailyTaskMessage();
//       }
//     }
//   }

//   Future<void> _addDailyTaskMessage() async {
//     try {
//       final response = await http.get(
//         Uri.parse(
//           'http://10.171.230.126::5000/daily_task?user_id=${user!.uid}',
//         ),
//       );

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//         // Normalize to start of day to ensure consistent comparison
//         final today = DateTime(now.year, now.month, now.day);

//         final taskMessage = {
//           'type': 'daily-task',
//           'message': data['task'] ?? 'Your daily reflection task',
//           'timestamp': today, // Use normalized date
//           'task_id': data['timestamp'],
//           'completed': data['completed'] ?? false,
//         };

//         await _storeMessage(taskMessage);
//         await _loadMessages(); // Refresh messages
//       }
//     } catch (e) {
//       debugPrint('Error loading daily task: $e');
//     }
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       // Find the last spiral stage
//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> _completeTask(String taskId) async {
//     try {
//       final response = await http.post(
//         Uri.parse('http://10.171.230.126::5000/complete_task'),
//         headers: {'Content-Type': 'application/json'},
//         body: jsonEncode({'user_id': user!.uid, 'task_id': taskId}),
//       );

//       if (response.statusCode == 200) {
//         // Update the message in the list
//         setState(() {
//           final taskIndex = messages.indexWhere(
//             (msg) => msg['task_id'] == taskId && msg['type'] == 'daily-task',
//           );
//           if (taskIndex != -1) {
//             messages[taskIndex]['completed'] = true;
//           }
//         });
//       }
//     } catch (e) {
//       debugPrint('Error completing task: $e');
//     }
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://10.171.230.126::5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage != null
//                   ? (selectedMessage?['question'] ??
//                       selectedMessage?['response'] ??
//                       selectedMessage?['user'] ??
//                       selectedMessage?['message'] ??
//                       "")
//                   : "",
//           "is_spiral_reply":
//               selectedMessage != null && selectedMessage?['type'] == 'spiral',
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         setState(() {
//           messages.add({
//             'type': 'error',
//             'message':
//                 'Server error: ${response.statusCode} - ${response.body}',
//             'timestamp': now,
//           });
//         });
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Network error: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//       // Scroll to bottom after sending a message
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     final docRef = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add({...msg, 'id': docRef.id}));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("❌ Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("❌ Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     setState(() => isLoading = true);
//     final uri = Uri.parse("http://10.171.230.126::5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri);
//     request.fields['last_stage'] = lastStage ?? '';
//     request.fields['reply_to'] =
//         selectedMessage != null
//             ? (selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "")
//             : "";
//     request.fields['is_spiral_reply'] =
//         (selectedMessage != null && selectedMessage?['type'] == 'spiral')
//             .toString();
//     request.files.add(
//       await http.MultipartFile.fromPath(
//         'file',
//         file.path,
//         contentType: MediaType('audio', 'wav'),
//       ),
//     );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'transcription': data['transcription'] ?? '',
//           'type': data['mode'],
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//         } else {
//           msg['stage'] = data['stage'] ?? '';
//           msg['question'] = data['question'] ?? '';
//           msg['growth'] = data['growth'] ?? '';
//           msg['evolution'] = data['evolution'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Voice processing failed: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() => isLoading = false);
//       // Scroll to bottom after sending a voice message
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   List<Map<String, dynamic>> getMessagesWithDateHeaders() {
//     List<Map<String, dynamic>> processed = [];
//     String? lastDate;

//     for (final msg in messages) {
//       final timestamp =
//           msg['timestamp'] is Timestamp
//               ? (msg['timestamp'] as Timestamp).toDate()
//               : msg['timestamp'] is String
//               ? DateTime.parse(msg['timestamp'])
//               : DateTime.now();
//       final dateStr = DateFormat('yyyy-MM-dd').format(timestamp);

//       if (lastDate != dateStr) {
//         processed.add({'type': 'date-header', 'date': timestamp});
//         lastDate = dateStr;
//       }

//       processed.add(msg);
//     }

//     return processed;
//   }

//   void _toggleMessageSelection(String messageId) {
//     setState(() {
//       if (selectedMessageIds.contains(messageId)) {
//         selectedMessageIds.remove(messageId);
//       } else {
//         selectedMessageIds.add(messageId);
//       }
//       _isSelecting = selectedMessageIds.isNotEmpty;
//     });
//   }

//   void _cancelSelection() {
//     setState(() {
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   void _setReplyToMessage(Map<String, dynamic> message) {
//     setState(() {
//       selectedMessage = message;
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   PreferredSizeWidget _buildSelectionAppBar() {
//     return AppBar(
//       leading: IconButton(
//         icon: const Icon(Icons.close),
//         onPressed: _cancelSelection,
//       ),
//       title: Text('${selectedMessageIds.length} selected'),
//       actions: [
//         IconButton(
//           icon: const Icon(Icons.reply),
//           onPressed: () {
//             if (selectedMessageIds.length == 1) {
//               final message = messages.firstWhere(
//                 (m) => m['id'] == selectedMessageIds.first,
//                 orElse: () => {},
//               );
//               if (message.isNotEmpty) {
//                 _setReplyToMessage(message);
//               }
//             }
//           },
//         ),
//       ],
//     );
//   }

//   Widget _buildReplyPreview() {
//     if (selectedMessage == null) return const SizedBox.shrink();

//     final replyText =
//         selectedMessage?['question'] ??
//         selectedMessage?['response'] ??
//         selectedMessage?['user'] ??
//         selectedMessage?['message'] ??
//         "";

//     return Container(
//       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       decoration: BoxDecoration(
//         color: Colors.grey[200],
//         border: Border(
//           left: BorderSide(
//             color:
//                 selectedMessage?['type'] == 'spiral'
//                     ? Colors.orange
//                     : Colors.blue,
//             width: 4,
//           ),
//         ),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               Text(
//                 selectedMessage?['type'] == 'spiral'
//                     ? '🌀 Replying to Spiral Stage'
//                     : '💬 Replying to Message',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color:
//                       selectedMessage?['type'] == 'spiral'
//                           ? Colors.orange
//                           : Colors.blue,
//                 ),
//               ),
//               IconButton(
//                 icon: const Icon(Icons.close, size: 20),
//                 onPressed: () {
//                   setState(() {
//                     selectedMessage = null;
//                   });
//                 },
//               ),
//             ],
//           ),
//           const SizedBox(height: 4),
//           Container(
//             constraints: const BoxConstraints(maxHeight: 150),
//             child: SingleChildScrollView(
//               child: Text(replyText, style: const TextStyle(fontSize: 14)),
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     if (msg['type'] == 'date-header') {
//       return Center(
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 10),
//           padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: Text(
//             DateFormat('EEEE, MMM d, yyyy').format(msg['date']),
//             style: const TextStyle(
//               fontSize: 12,
//               color: Colors.black87,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//         ),
//       );
//     }

//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : msg['timestamp'] is String
//             ? DateTime.parse(msg['timestamp'])
//             : DateTime.now();
//     final isSelected = selectedMessageIds.contains(msg['id']);
//     final isReply = msg['reply_to_id'] != null;

//     return GestureDetector(
//       onLongPress: () {
//         if (!_isSelecting) {
//           setState(() {
//             _isSelecting = true;
//             selectedMessageIds.add(msg['id']);
//           });
//         }
//       },
//       onTap: () {
//         if (_isSelecting) {
//           _toggleMessageSelection(msg['id']);
//         }
//       },
//       child: Container(
//         margin: const EdgeInsets.symmetric(vertical: 4),
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue[50] : Colors.transparent,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           children: [
//             if (isReply && msg['reply_to'] != null)
//               Padding(
//                 padding: const EdgeInsets.only(left: 16, top: 8, right: 16),
//                 child: Container(
//                   padding: const EdgeInsets.all(8),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[100],
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.grey[300]!),
//                   ),
//                   child: Row(
//                     children: [
//                       Container(
//                         width: 4,
//                         height: 40,
//                         color: Colors.grey,
//                         margin: const EdgeInsets.only(right: 8),
//                       ),
//                       Expanded(
//                         child: Text(
//                           msg['reply_to'],
//                           maxLines: 2,
//                           overflow: TextOverflow.ellipsis,
//                           style: const TextStyle(
//                             fontSize: 12,
//                             color: Colors.grey,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'daily-task')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: Colors.purple[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           const Text(
//                             "📝 Inner Compass",
//                             style: TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 8),
//                           Text(msg['message'] ?? ''),
//                           const SizedBox(height: 8),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] != null && msg['user'] != '[Voice]')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.blue[300]
//                                 : isReply
//                                 ? Colors.blue[100]
//                                 : Colors.blue[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.end,
//                         children: [
//                           Text(
//                             msg['user'] ?? '',
//                             style: const TextStyle(color: Colors.black),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] == '[Voice]' && msg['audioPath'] != null)
//               Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 16),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(12),
//                       decoration: BoxDecoration(
//                         color: Colors.blueGrey[50],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                         border: Border.all(color: Colors.blueGrey[100]!),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Row(
//                             children: [
//                               Icon(
//                                 Icons.mic,
//                                 color: Colors.blueGrey[600],
//                                 size: 20,
//                               ),
//                               const SizedBox(width: 8),
//                               Text(
//                                 "Voice Message",
//                                 style: TextStyle(
//                                   fontWeight: FontWeight.bold,
//                                   color: Colors.blueGrey[800],
//                                 ),
//                               ),
//                             ],
//                           ),
//                           const SizedBox(height: 8),
//                           AudioPlayerWidget(filePath: msg['audioPath']),
//                           if (msg['transcription'] != null &&
//                               msg['transcription'].isNotEmpty)
//                             Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 const SizedBox(height: 8),
//                                 Text(
//                                   "Transcription:",
//                                   style: TextStyle(
//                                     fontSize: 12,
//                                     fontWeight: FontWeight.bold,
//                                     color: Colors.blueGrey[800],
//                                   ),
//                                 ),
//                                 const SizedBox(height: 4),
//                                 Text(
//                                   '"${msg['transcription']}"',
//                                   style: const TextStyle(
//                                     fontSize: 12,
//                                     color: Colors.black87,
//                                   ),
//                                 ),
//                               ],
//                             ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'chat')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.grey[300]
//                                 : isReply
//                                 ? Colors.grey[100]
//                                 : Colors.grey[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomRight: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(msg['response'] ?? ''),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'spiral')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.orange[200]
//                                 : isReply
//                                 ? Colors.orange[50]
//                                 : Colors.orange[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(
//                             "🌀 Stage: ${msg['stage'] ?? ''}",
//                             style: const TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 6),
//                           Text(
//                             "❓ ${msg['question'] ?? ''}",
//                             style: const TextStyle(
//                               fontStyle: FontStyle.italic,
//                               fontSize: 14,
//                             ),
//                           ),
//                           if ((msg['growth'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 '"${msg['growth']}"',
//                                 style: const TextStyle(
//                                   fontSize: 13,
//                                   fontStyle: FontStyle.italic,
//                                   color: Colors.black,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                           if ((msg['evolution'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 msg['evolution'],
//                                 style: const TextStyle(
//                                   color: Colors.green,
//                                   fontWeight: FontWeight.w600,
//                                 ),
//                               ),
//                             ),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'error')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: Colors.red[100],
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Text(
//                         "❌ ${msg['message'] ?? 'Error'}",
//                         style: const TextStyle(color: Colors.red),
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     if (_isInitializing) {
//       return Scaffold(
//         body: Center(
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               CircularProgressIndicator(),
//               SizedBox(height: 20),
//               Text('Loading your reflections...'),
//             ],
//           ),
//         ),
//       );
//     }

//     return Scaffold(
//       appBar:
//           _isSelecting
//               ? _buildSelectionAppBar()
//               : AppBar(
//                 title: const Text("Reflect & Chat"),
//                 actions: [
//                   IconButton(
//                     icon: const Icon(Icons.show_chart),
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder:
//                               (context) => const SpiralEvolutionChartScreen(),
//                         ),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           final displayMessages = getMessagesWithDateHeaders();
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 _buildReplyPreview(),
//                 Expanded(
//                   child: ListView.builder(
//                     controller: _scrollController,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: displayMessages.length,
//                     itemBuilder:
//                         (context, index) =>
//                             buildChatBubble(displayMessages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.only(
//                     left: 12,
//                     right: 12,
//                     top: 10,
//                     bottom: 20,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText:
//                                 selectedMessage != null
//                                     ? "Replying..."
//                                     : "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;
//   Duration? _duration;
//   Duration? _position;

//   @override
//   void initState() {
//     super.initState();
//     _player.durationStream.listen((duration) {
//       setState(() => _duration = duration);
//     });
//     _player.positionStream.listen((position) {
//       setState(() => _position = position);
//     });
//     _player.playerStateStream.listen((state) {
//       if (state.processingState == ProcessingState.completed) {
//         setState(() => _isPlaying = false);
//       }
//     });
//   }

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       try {
//         if (widget.filePath.startsWith('http')) {
//           await _player.setUrl(widget.filePath);
//         } else {
//           await _player.setFilePath(widget.filePath);
//         }
//         await _player.play();
//       } catch (e) {
//         debugPrint('Error playing audio: $e');
//       }
//     }
//     setState(() => _isPlaying = !_isPlaying);
//   }

//   String _formatDuration(Duration? duration) {
//     if (duration == null) return '--:--';
//     final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
//     final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
//     return '$minutes:$seconds';
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(
//             _isPlaying ? Icons.pause : Icons.play_arrow,
//             color: Colors.blueGrey[800],
//             size: 24,
//           ),
//           onPressed: _togglePlayPause,
//         ),
//         Expanded(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               SliderTheme(
//                 data: SliderTheme.of(context).copyWith(
//                   activeTrackColor: Colors.blueGrey[600],
//                   inactiveTrackColor: Colors.blueGrey[200],
//                   trackHeight: 2,
//                   thumbColor: Colors.blueGrey[600],
//                   thumbShape: const RoundSliderThumbShape(
//                     enabledThumbRadius: 6,
//                   ),
//                   overlayColor: Colors.blueGrey.withAlpha(32),
//                   overlayShape: const RoundSliderOverlayShape(
//                     overlayRadius: 12,
//                   ),
//                 ),
//                 child: Slider(
//                   value: (_position ?? Duration.zero).inMilliseconds.toDouble(),
//                   min: 0,
//                   max: _duration?.inMilliseconds.toDouble() ?? 1,
//                   onChanged: (value) {
//                     _player.seek(Duration(milliseconds: value.toInt()));
//                   },
//                 ),
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text(
//                     _formatDuration(_position),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                   Text(
//                     _formatDuration(_duration),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ],
//           ),
//         ),
//       ],
//     );
//   }
// }


// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/spiral_evolution_chart.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   bool _isInitializing = true;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//   bool _isSelecting = false;
//   List<String> selectedMessageIds = [];
//   final ScrollController _scrollController = ScrollController();

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;
//   DateTime? _lastTaskCheck;

//   @override
//   void initState() {
//     super.initState();
//     _initializeData();
//   }

//   @override
//   void dispose() {
//     _scrollController.dispose();
//     super.dispose();
//   }

//   Future<void> _initializeData() async {
//     setState(() => _isInitializing = true);
//     await _requestPermissions();
//     await _loadMessages();
//     await _checkAndAddDailyTask();
//     setState(() => _isInitializing = false);

//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       if (_scrollController.hasClients) {
//         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//       }
//     });
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _checkAndAddDailyTask() async {
//     final now = DateTime.now();
//     if (_lastTaskCheck != null &&
//         now.difference(_lastTaskCheck!) < Duration(minutes: 5)) {
//       return;
//     }
//     _lastTaskCheck = now;

//     final today = DateTime.now();
//     final todayStr = DateFormat('yyyy-MM-dd').format(today);

//     try {
//       final querySnapshot =
//           await firestore
//               .collection('users')
//               .doc(user!.uid)
//               .collection('mergedMessages')
//               .where('type', isEqualTo: 'daily-task')
//               .where(
//                 'timestamp',
//                 isGreaterThanOrEqualTo: DateTime(
//                   today.year,
//                   today.month,
//                   today.day,
//                 ),
//               )
//               .where(
//                 'timestamp',
//                 isLessThan: DateTime(today.year, today.month, today.day + 1),
//               )
//               .limit(1)
//               .get();

//       if (querySnapshot.docs.isEmpty) {
//         await _addDailyTaskMessage();
//       }
//     } catch (e) {
//       debugPrint('Error checking for daily task: $e');
//       final hasDailyTask = messages.any((msg) {
//         if (msg['type'] == 'daily-task') {
//           DateTime timestamp;
//           if (msg['timestamp'] is Timestamp) {
//             timestamp = (msg['timestamp'] as Timestamp).toDate();
//           } else if (msg['timestamp'] is String) {
//             timestamp = DateTime.parse(msg['timestamp']);
//           } else {
//             timestamp = msg['timestamp'];
//           }
//           return DateFormat('yyyy-MM-dd').format(timestamp) == todayStr;
//         }
//         return false;
//       });

//       if (!hasDailyTask) {
//         await _addDailyTaskMessage();
//       }
//     }
//   }

//   Future<void> _addDailyTaskMessage() async {
//     try {
//       final response = await http.get(
//         Uri.parse('http://10.206.190.126:5000/daily_task?user_id=${user!.uid}'),
//       );

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//         final today = DateTime(now.year, now.month, now.day);

//         final taskMessage = {
//           'type': 'daily-task',
//           'message': data['task'] ?? 'Your daily reflection task',
//           'timestamp': today,
//           'task_id': data['timestamp'],
//           'completed': data['completed'] ?? false,
//         };

//         await _storeMessage(taskMessage);
//         await _loadMessages();
//       }
//     } catch (e) {
//       debugPrint('Error loading daily task: $e');
//     }
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://10.206.190.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage != null
//                   ? (selectedMessage?['question'] ??
//                       selectedMessage?['response'] ??
//                       selectedMessage?['user'] ??
//                       selectedMessage?['message'] ??
//                       "")
//                   : "",
//           "is_spiral_reply":
//               selectedMessage != null && selectedMessage?['type'] == 'spiral',
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         setState(() {
//           messages.add({
//             'type': 'error',
//             'message':
//                 'Server error: ${response.statusCode} - ${response.body}',
//             'timestamp': now,
//           });
//         });
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Network error: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     final docRef = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add({...msg, 'id': docRef.id}));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("❌ Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("❌ Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     setState(() => isLoading = true);
//     final uri = Uri.parse("http://10.206.190.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri);
//     request.fields['last_stage'] = lastStage ?? '';
//     request.fields['reply_to'] =
//         selectedMessage != null
//             ? (selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "")
//             : "";
//     request.fields['is_spiral_reply'] =
//         (selectedMessage != null && selectedMessage?['type'] == 'spiral')
//             .toString();
//     request.files.add(
//       await http.MultipartFile.fromPath(
//         'file',
//         file.path,
//         contentType: MediaType('audio', 'wav'),
//       ),
//     );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'transcription': data['transcription'] ?? '',
//           'type': data['mode'],
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//         } else if (data['mode'] == 'spiral') {
//           msg['stage'] = data['stage'] ?? '';
//           msg['question'] = data['question'] ?? '';
//           msg['growth'] = data['growth'] ?? '';
//           msg['evolution'] = data['evolution'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Voice processing failed: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() => isLoading = false);
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   List<Map<String, dynamic>> getMessagesWithDateHeaders() {
//     List<Map<String, dynamic>> processed = [];
//     String? lastDate;

//     for (final msg in messages) {
//       final timestamp =
//           msg['timestamp'] is Timestamp
//               ? (msg['timestamp'] as Timestamp).toDate()
//               : msg['timestamp'] is String
//               ? DateTime.parse(msg['timestamp'])
//               : DateTime.now();
//       final dateStr = DateFormat('yyyy-MM-dd').format(timestamp);

//       if (lastDate != dateStr) {
//         processed.add({'type': 'date-header', 'date': timestamp});
//         lastDate = dateStr;
//       }

//       processed.add(msg);
//     }

//     return processed;
//   }

//   void _toggleMessageSelection(String messageId) {
//     setState(() {
//       if (selectedMessageIds.contains(messageId)) {
//         selectedMessageIds.remove(messageId);
//       } else {
//         selectedMessageIds.add(messageId);
//       }
//       _isSelecting = selectedMessageIds.isNotEmpty;
//     });
//   }

//   void _cancelSelection() {
//     setState(() {
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   void _setReplyToMessage(Map<String, dynamic> message) {
//     setState(() {
//       selectedMessage = message;
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   PreferredSizeWidget _buildSelectionAppBar() {
//     return AppBar(
//       leading: IconButton(
//         icon: const Icon(Icons.close),
//         onPressed: _cancelSelection,
//       ),
//       title: Text('${selectedMessageIds.length} selected'),
//       actions: [
//         IconButton(
//           icon: const Icon(Icons.reply),
//           onPressed: () {
//             if (selectedMessageIds.length == 1) {
//               final message = messages.firstWhere(
//                 (m) => m['id'] == selectedMessageIds.first,
//                 orElse: () => {},
//               );
//               if (message.isNotEmpty) {
//                 _setReplyToMessage(message);
//               }
//             }
//           },
//         ),
//       ],
//     );
//   }

//   Widget _buildReplyPreview() {
//     if (selectedMessage == null) return const SizedBox.shrink();

//     final replyText =
//         selectedMessage?['question'] ??
//         selectedMessage?['response'] ??
//         selectedMessage?['user'] ??
//         selectedMessage?['message'] ??
//         "";

//     return Container(
//       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       decoration: BoxDecoration(
//         color: Colors.grey[200],
//         border: Border(
//           left: BorderSide(
//             color:
//                 selectedMessage?['type'] == 'spiral'
//                     ? Colors.orange
//                     : Colors.blue,
//             width: 4,
//           ),
//         ),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               Text(
//                 selectedMessage?['type'] == 'spiral'
//                     ? '🌀 Replying to Spiral Stage'
//                     : '💬 Replying to Message',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color:
//                       selectedMessage?['type'] == 'spiral'
//                           ? Colors.orange
//                           : Colors.blue,
//                 ),
//               ),
//               IconButton(
//                 icon: const Icon(Icons.close, size: 20),
//                 onPressed: () {
//                   setState(() {
//                     selectedMessage = null;
//                   });
//                 },
//               ),
//             ],
//           ),
//           const SizedBox(height: 4),
//           Container(
//             constraints: const BoxConstraints(maxHeight: 150),
//             child: SingleChildScrollView(
//               child: Text(replyText, style: const TextStyle(fontSize: 14)),
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     if (msg['type'] == 'date-header') {
//       return Center(
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 10),
//           padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: Text(
//             DateFormat('EEEE, MMM d, yyyy').format(msg['date']),
//             style: const TextStyle(
//               fontSize: 12,
//               color: Colors.black87,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//         ),
//       );
//     }

//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : msg['timestamp'] is String
//             ? DateTime.parse(msg['timestamp'])
//             : DateTime.now();
//     final isSelected = selectedMessageIds.contains(msg['id']);
//     final isReply = msg['reply_to_id'] != null;

//     return GestureDetector(
//       onLongPress: () {
//         if (!_isSelecting) {
//           setState(() {
//             _isSelecting = true;
//             selectedMessageIds.add(msg['id']);
//           });
//         }
//       },
//       onTap: () {
//         if (_isSelecting) {
//           _toggleMessageSelection(msg['id']);
//         }
//       },
//       child: Container(
//         margin: const EdgeInsets.symmetric(vertical: 4),
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue[50] : Colors.transparent,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           children: [
//             if (isReply && msg['reply_to'] != null)
//               Padding(
//                 padding: const EdgeInsets.only(left: 16, top: 8, right: 16),
//                 child: Container(
//                   padding: const EdgeInsets.all(8),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[100],
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.grey[300]!),
//                   ),
//                   child: Row(
//                     children: [
//                       Container(
//                         width: 4,
//                         height: 40,
//                         color: Colors.grey,
//                         margin: const EdgeInsets.only(right: 8),
//                       ),
//                       Expanded(
//                         child: Text(
//                           msg['reply_to'],
//                           maxLines: 2,
//                           overflow: TextOverflow.ellipsis,
//                           style: const TextStyle(
//                             fontSize: 12,
//                             color: Colors.grey,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'daily-task')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: Colors.purple[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           const Text(
//                             "📝 Inner Compass",
//                             style: TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 8),
//                           Text(msg['message'] ?? ''),
//                           const SizedBox(height: 8),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] != null && msg['user'] != '[Voice]')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.blue[300]
//                                 : isReply
//                                 ? Colors.blue[100]
//                                 : Colors.blue[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.end,
//                         children: [
//                           Text(
//                             msg['user'] ?? '',
//                             style: const TextStyle(color: Colors.black),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] == '[Voice]' && msg['audioPath'] != null)
//               Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 16),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(12),
//                       decoration: BoxDecoration(
//                         color: Colors.blueGrey[50],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                         border: Border.all(color: Colors.blueGrey[100]!),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Row(
//                             children: [
//                               Icon(
//                                 Icons.mic,
//                                 color: Colors.blueGrey[600],
//                                 size: 20,
//                               ),
//                               const SizedBox(width: 8),
//                               Text(
//                                 "Voice Message",
//                                 style: TextStyle(
//                                   fontWeight: FontWeight.bold,
//                                   color: Colors.blueGrey[800],
//                                 ),
//                               ),
//                             ],
//                           ),
//                           const SizedBox(height: 8),
//                           AudioPlayerWidget(filePath: msg['audioPath']),
//                           if (msg['transcription'] != null &&
//                               msg['transcription'].isNotEmpty)
//                             Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 const SizedBox(height: 8),
//                                 Text(
//                                   "Transcription:",
//                                   style: TextStyle(
//                                     fontSize: 12,
//                                     fontWeight: FontWeight.bold,
//                                     color: Colors.blueGrey[800],
//                                   ),
//                                 ),
//                                 const SizedBox(height: 4),
//                                 Text(
//                                   '"${msg['transcription']}"',
//                                   style: const TextStyle(
//                                     fontSize: 12,
//                                     color: Colors.black87,
//                                   ),
//                                 ),
//                               ],
//                             ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'chat')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.grey[300]
//                                 : isReply
//                                 ? Colors.grey[100]
//                                 : Colors.grey[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomRight: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(msg['response'] ?? ''),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'spiral')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.orange[200]
//                                 : isReply
//                                 ? Colors.orange[50]
//                                 : Colors.orange[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(
//                             "🌀 Stage: ${msg['stage'] ?? ''}",
//                             style: const TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 6),
//                           Text(
//                             "❓ ${msg['question'] ?? ''}",
//                             style: const TextStyle(
//                               fontStyle: FontStyle.italic,
//                               fontSize: 14,
//                             ),
//                           ),
//                           if ((msg['growth'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 '"${msg['growth']}"',
//                                 style: const TextStyle(
//                                   fontSize: 13,
//                                   fontStyle: FontStyle.italic,
//                                   color: Colors.black,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                           if ((msg['evolution'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 msg['evolution'],
//                                 style: const TextStyle(
//                                   color: Colors.green,
//                                   fontWeight: FontWeight.w600,
//                                 ),
//                               ),
//                             ),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'error')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: Colors.red[100],
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Text(
//                         "❌ ${msg['message'] ?? 'Error'}",
//                         style: const TextStyle(color: Colors.red),
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     if (_isInitializing) {
//       return Scaffold(
//         body: Center(
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               CircularProgressIndicator(),
//               SizedBox(height: 20),
//               Text('Loading your reflections...'),
//             ],
//           ),
//         ),
//       );
//     }

//     return Scaffold(
//       appBar:
//           _isSelecting
//               ? _buildSelectionAppBar()
//               : AppBar(
//                 title: const Text("Reflect & Chat"),
//                 actions: [
//                   IconButton(
//                     icon: const Icon(Icons.show_chart),
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder:
//                               (context) => const SpiralEvolutionChartScreen(),
//                         ),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           final displayMessages = getMessagesWithDateHeaders();
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 _buildReplyPreview(),
//                 Expanded(
//                   child: ListView.builder(
//                     controller: _scrollController,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: displayMessages.length,
//                     itemBuilder:
//                         (context, index) =>
//                             buildChatBubble(displayMessages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.only(
//                     left: 12,
//                     right: 12,
//                     top: 10,
//                     bottom: 20,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText:
//                                 selectedMessage != null
//                                     ? "Replying..."
//                                     : "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;
//   Duration? _duration;
//   Duration? _position;

//   @override
//   void initState() {
//     super.initState();
//     _player.durationStream.listen((duration) {
//       setState(() => _duration = duration);
//     });
//     _player.positionStream.listen((position) {
//       setState(() => _position = position);
//     });
//     _player.playerStateStream.listen((state) {
//       if (state.processingState == ProcessingState.completed) {
//         setState(() => _isPlaying = false);
//       }
//     });
//   }

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       try {
//         if (widget.filePath.startsWith('http')) {
//           await _player.setUrl(widget.filePath);
//         } else {
//           await _player.setFilePath(widget.filePath);
//         }
//         await _player.play();
//       } catch (e) {
//         debugPrint('Error playing audio: $e');
//       }
//     }
//     setState(() => _isPlaying = !_isPlaying);
//   }

//   String _formatDuration(Duration? duration) {
//     if (duration == null) return '--:--';
//     final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
//     final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
//     return '$minutes:$seconds';
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(
//             _isPlaying ? Icons.pause : Icons.play_arrow,
//             color: Colors.blueGrey[800],
//             size: 24,
//           ),
//           onPressed: _togglePlayPause,
//         ),
//         Expanded(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               SliderTheme(
//                 data: SliderTheme.of(context).copyWith(
//                   activeTrackColor: Colors.blueGrey[600],
//                   inactiveTrackColor: Colors.blueGrey[200],
//                   trackHeight: 2,
//                   thumbColor: Colors.blueGrey[600],
//                   thumbShape: const RoundSliderThumbShape(
//                     enabledThumbRadius: 6,
//                   ),
//                   overlayColor: Colors.blueGrey.withAlpha(32),
//                   overlayShape: const RoundSliderOverlayShape(
//                     overlayRadius: 12,
//                   ),
//                 ),
//                 child: Slider(
//                   value: (_position ?? Duration.zero).inMilliseconds.toDouble(),
//                   min: 0,
//                   max: _duration?.inMilliseconds.toDouble() ?? 1,
//                   onChanged: (value) {
//                     _player.seek(Duration(milliseconds: value.toInt()));
//                   },
//                 ),
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text(
//                     _formatDuration(_position),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                   Text(
//                     _formatDuration(_duration),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ],
//           ),
//         ),
//       ],
//     );
//   }
// }

// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/spiral_evolution_chart.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   bool _isInitializing = true;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//   bool _isSelecting = false;
//   List<String> selectedMessageIds = [];
//   final ScrollController _scrollController = ScrollController();

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;
//   DateTime? _lastTaskCheck;

//   @override
//   void initState() {
//     super.initState();
//     _initializeData();
//   }

//   @override
//   void dispose() {
//     _scrollController.dispose();
//     super.dispose();
//   }

//   Future<void> _initializeData() async {
//     setState(() => _isInitializing = true);
//     await _requestPermissions();
//     await _loadMessages();
//     await _checkAndAddDailyTask();
//     setState(() => _isInitializing = false);

//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       if (_scrollController.hasClients) {
//         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//       }
//     });
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _checkAndAddDailyTask() async {
//     final now = DateTime.now();
//     if (_lastTaskCheck != null &&
//         now.difference(_lastTaskCheck!) < Duration(minutes: 5)) {
//       return;
//     }
//     _lastTaskCheck = now;

//     final today = DateTime.now();
//     final todayStr = DateFormat('yyyy-MM-dd').format(today);

//     try {
//       final querySnapshot =
//           await firestore
//               .collection('users')
//               .doc(user!.uid)
//               .collection('mergedMessages')
//               .where('type', isEqualTo: 'daily-task')
//               .where(
//                 'timestamp',
//                 isGreaterThanOrEqualTo: DateTime(
//                   today.year,
//                   today.month,
//                   today.day,
//                 ),
//               )
//               .where(
//                 'timestamp',
//                 isLessThan: DateTime(today.year, today.month, today.day + 1),
//               )
//               .limit(1)
//               .get();

//       if (querySnapshot.docs.isEmpty) {
//         await _addDailyTaskMessage();
//       }
//     } catch (e) {
//       debugPrint('Error checking for daily task: $e');
//       final hasDailyTask = messages.any((msg) {
//         if (msg['type'] == 'daily-task') {
//           DateTime timestamp;
//           if (msg['timestamp'] is Timestamp) {
//             timestamp = (msg['timestamp'] as Timestamp).toDate();
//           } else if (msg['timestamp'] is String) {
//             timestamp = DateTime.parse(msg['timestamp']);
//           } else {
//             timestamp = msg['timestamp'];
//           }
//           return DateFormat('yyyy-MM-dd').format(timestamp) == todayStr;
//         }
//         return false;
//       });

//       if (!hasDailyTask) {
//         await _addDailyTaskMessage();
//       }
//     }
//   }

//   Future<void> _addDailyTaskMessage() async {
//     try {
//       final response = await http.get(
//         Uri.parse('http://10.206.190.126:5000/daily_task?user_id=${user!.uid}'),
//       );

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//         final today = DateTime(now.year, now.month, now.day);

//         final taskMessage = {
//           'type': 'daily-task',
//           'message': data['task'] ?? 'Your daily reflection task',
//           'timestamp': today,
//           'task_id': data['timestamp'],
//           'completed': data['completed'] ?? false,
//         };

//         await _storeMessage(taskMessage);
//         await _loadMessages();
//       }
//     } catch (e) {
//       debugPrint('Error loading daily task: $e');
//     }
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://10.206.190.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage != null
//                   ? (selectedMessage?['question'] ??
//                       selectedMessage?['response'] ??
//                       selectedMessage?['user'] ??
//                       selectedMessage?['message'] ??
//                       "")
//                   : "",
//           "is_spiral_reply":
//               selectedMessage != null && selectedMessage?['type'] == 'spiral',
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         setState(() {
//           messages.add({
//             'type': 'error',
//             'message':
//                 'Server error: ${response.statusCode} - ${response.body}',
//             'timestamp': now,
//           });
//         });
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Network error: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     final docRef = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add({...msg, 'id': docRef.id}));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("❌ Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("❌ Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     setState(() => isLoading = true);
//     final uri = Uri.parse("http://10.206.190.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri);
//     request.fields['last_stage'] = lastStage ?? '';
//     request.fields['reply_to'] =
//         selectedMessage != null
//             ? (selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "")
//             : "";
//     request.fields['is_spiral_reply'] =
//         (selectedMessage != null && selectedMessage?['type'] == 'spiral')
//             .toString();
//     request.files.add(
//       await http.MultipartFile.fromPath(
//         'file',
//         file.path,
//         contentType: MediaType('audio', 'wav'),
//       ),
//     );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'transcription': data['transcription'] ?? '',
//           'type': data['mode'],
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//         } else {
//           msg['stage'] = data['stage'] ?? '';
//           msg['question'] = data['question'] ?? '';
//           msg['growth'] = data['growth'] ?? '';
//           msg['evolution'] = data['evolution'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Voice processing failed: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() => isLoading = false);
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }
//   // Future<void> _sendVoiceToBackend(File file) async {
//   //   setState(() => isLoading = true);

//   //   try {
//   //     // Step 1: Upload the file
//   //     final uploadRequest = http.MultipartRequest(
//   //       'POST',
//   //       Uri.parse('http://10.206.190.126:5000/upload_audio'),
//   //     );
//   //     uploadRequest.files.add(
//   //       await http.MultipartFile.fromPath('file', file.path),
//   //     );
//   //     final uploadResponse = await uploadRequest.send();
//   //     final uploadBody = await uploadResponse.stream.bytesToString();
//   //     final audioUrl = json.decode(uploadBody)['url'];

//   //     // Step 2: Reflect transcription with JSON
//   //     final reflectResponse = await http.post(
//   //       Uri.parse('http://10.206.190.126:5000/reflect_transcription'),
//   //       headers: {'Content-Type': 'application/json'},
//   //       body: json.encode({
//   //         'url': audioUrl,
//   //         'diarized': true, // or false if user chose no diarization
//   //         'last_stage': lastStage ?? "",
//   //       }),
//   //     );

//   //     final data = json.decode(reflectResponse.body);
//   //     final now = DateTime.now();

//   //     if (reflectResponse.statusCode == 200) {
//   //       final msg = {
//   //         'user': '[Voice]',
//   //         'timestamp': now,
//   //         'audioPath': file.path,
//   //         'transcription': data['transcription'] ?? '',
//   //         'type': data['mode'],
//   //         if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//   //         if (selectedMessage != null)
//   //           'reply_to':
//   //               selectedMessage?['question'] ??
//   //               selectedMessage?['response'] ??
//   //               selectedMessage?['user'] ??
//   //               selectedMessage?['message'] ??
//   //               "",
//   //       };

//   //       if (data['mode'] == 'chat') {
//   //         msg['response'] = data['response'] ?? '';
//   //         msg['audio_url'] = data['audio_url'] ?? '';
//   //       } else {
//   //         msg['stage'] = data['stage'] ?? '';
//   //         msg['question'] = data['question'] ?? '';
//   //         msg['growth'] = data['growth'] ?? '';
//   //         msg['evolution'] = data['evolution'] ?? '';
//   //         msg['audio_url'] = data['audio_url'] ?? '';
//   //         lastStage = data['stage'];
//   //       }

//   //       await _storeMessage(msg);
//   //     } else {
//   //       throw Exception(data['error'] ?? 'Unknown error');
//   //     }
//   //   } catch (e) {
//   //     setState(() {
//   //       messages.add({
//   //         'type': 'error',
//   //         'message': 'Voice processing failed: ${e.toString()}',
//   //         'timestamp': DateTime.now(),
//   //       });
//   //     });
//   //   } finally {
//   //     setState(() => isLoading = false);
//   //     WidgetsBinding.instance.addPostFrameCallback((_) {
//   //       if (_scrollController.hasClients) {
//   //         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//   //       }
//   //     });
//   //   }
//   // }

//   List<Map<String, dynamic>> getMessagesWithDateHeaders() {
//     List<Map<String, dynamic>> processed = [];
//     String? lastDate;

//     for (final msg in messages) {
//       final timestamp =
//           msg['timestamp'] is Timestamp
//               ? (msg['timestamp'] as Timestamp).toDate()
//               : msg['timestamp'] is String
//               ? DateTime.parse(msg['timestamp'])
//               : DateTime.now();
//       final dateStr = DateFormat('yyyy-MM-dd').format(timestamp);

//       if (lastDate != dateStr) {
//         processed.add({'type': 'date-header', 'date': timestamp});
//         lastDate = dateStr;
//       }

//       processed.add(msg);
//     }

//     return processed;
//   }

//   void _toggleMessageSelection(String messageId) {
//     setState(() {
//       if (selectedMessageIds.contains(messageId)) {
//         selectedMessageIds.remove(messageId);
//       } else {
//         selectedMessageIds.add(messageId);
//       }
//       _isSelecting = selectedMessageIds.isNotEmpty;
//     });
//   }

//   void _cancelSelection() {
//     setState(() {
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   void _setReplyToMessage(Map<String, dynamic> message) {
//     setState(() {
//       selectedMessage = message;
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   PreferredSizeWidget _buildSelectionAppBar() {
//     return AppBar(
//       leading: IconButton(
//         icon: const Icon(Icons.close),
//         onPressed: _cancelSelection,
//       ),
//       title: Text('${selectedMessageIds.length} selected'),
//       actions: [
//         IconButton(
//           icon: const Icon(Icons.reply),
//           onPressed: () {
//             if (selectedMessageIds.length == 1) {
//               final message = messages.firstWhere(
//                 (m) => m['id'] == selectedMessageIds.first,
//                 orElse: () => {},
//               );
//               if (message.isNotEmpty) {
//                 _setReplyToMessage(message);
//               }
//             }
//           },
//         ),
//       ],
//     );
//   }

//   Widget _buildReplyPreview() {
//     if (selectedMessage == null) return const SizedBox.shrink();

//     final replyText =
//         selectedMessage?['question'] ??
//         selectedMessage?['response'] ??
//         selectedMessage?['user'] ??
//         selectedMessage?['message'] ??
//         "";

//     return Container(
//       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       decoration: BoxDecoration(
//         color: Colors.grey[200],
//         border: Border(
//           left: BorderSide(
//             color:
//                 selectedMessage?['type'] == 'spiral'
//                     ? Colors.orange
//                     : Colors.blue,
//             width: 4,
//           ),
//         ),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               Text(
//                 selectedMessage?['type'] == 'spiral'
//                     ? '🌀 Replying to Spiral Stage'
//                     : '💬 Replying to Message',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color:
//                       selectedMessage?['type'] == 'spiral'
//                           ? Colors.orange
//                           : Colors.blue,
//                 ),
//               ),
//               IconButton(
//                 icon: const Icon(Icons.close, size: 20),
//                 onPressed: () {
//                   setState(() {
//                     selectedMessage = null;
//                   });
//                 },
//               ),
//             ],
//           ),
//           const SizedBox(height: 4),
//           Container(
//             constraints: const BoxConstraints(maxHeight: 150),
//             child: SingleChildScrollView(
//               child: Text(replyText, style: const TextStyle(fontSize: 14)),
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     if (msg['type'] == 'date-header') {
//       return Center(
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 10),
//           padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: Text(
//             DateFormat('EEEE, MMM d, yyyy').format(msg['date']),
//             style: const TextStyle(
//               fontSize: 12,
//               color: Colors.black87,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//         ),
//       );
//     }

//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : msg['timestamp'] is String
//             ? DateTime.parse(msg['timestamp'])
//             : DateTime.now();
//     final isSelected = selectedMessageIds.contains(msg['id']);
//     final isReply = msg['reply_to_id'] != null;

//     return GestureDetector(
//       onLongPress: () {
//         if (!_isSelecting) {
//           setState(() {
//             _isSelecting = true;
//             selectedMessageIds.add(msg['id']);
//           });
//         }
//       },
//       onTap: () {
//         if (_isSelecting) {
//           _toggleMessageSelection(msg['id']);
//         }
//       },
//       child: Container(
//         margin: const EdgeInsets.symmetric(vertical: 4),
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue[50] : Colors.transparent,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           children: [
//             if (isReply && msg['reply_to'] != null)
//               Padding(
//                 padding: const EdgeInsets.only(left: 16, top: 8, right: 16),
//                 child: Container(
//                   padding: const EdgeInsets.all(8),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[100],
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.grey[300]!),
//                   ),
//                   child: Row(
//                     children: [
//                       Container(
//                         width: 4,
//                         height: 40,
//                         color: Colors.grey,
//                         margin: const EdgeInsets.only(right: 8),
//                       ),
//                       Expanded(
//                         child: Text(
//                           msg['reply_to'],
//                           maxLines: 2,
//                           overflow: TextOverflow.ellipsis,
//                           style: const TextStyle(
//                             fontSize: 12,
//                             color: Colors.grey,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'daily-task')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: Colors.purple[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           const Text(
//                             "📝 Inner Compass",
//                             style: TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 8),
//                           Text(msg['message'] ?? ''),
//                           const SizedBox(height: 8),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] != null && msg['user'] != '[Voice]')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.blue[300]
//                                 : isReply
//                                 ? Colors.blue[100]
//                                 : Colors.blue[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.end,
//                         children: [
//                           Text(
//                             msg['user'] ?? '',
//                             style: const TextStyle(color: Colors.black),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] == '[Voice]' && msg['audioPath'] != null)
//               Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 16),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(12),
//                       decoration: BoxDecoration(
//                         color: Colors.blueGrey[50],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                         border: Border.all(color: Colors.blueGrey[100]!),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Row(
//                             children: [
//                               Icon(
//                                 Icons.mic,
//                                 color: Colors.blueGrey[600],
//                                 size: 20,
//                               ),
//                               const SizedBox(width: 8),
//                               Text(
//                                 "Voice Message",
//                                 style: TextStyle(
//                                   fontWeight: FontWeight.bold,
//                                   color: Colors.blueGrey[800],
//                                 ),
//                               ),
//                             ],
//                           ),
//                           const SizedBox(height: 8),
//                           AudioPlayerWidget(filePath: msg['audioPath']),
//                           if (msg['transcription'] != null &&
//                               msg['transcription'].isNotEmpty)
//                             Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 const SizedBox(height: 8),
//                                 Text(
//                                   "Transcription:",
//                                   style: TextStyle(
//                                     fontSize: 12,
//                                     fontWeight: FontWeight.bold,
//                                     color: Colors.blueGrey[800],
//                                   ),
//                                 ),
//                                 const SizedBox(height: 4),
//                                 Text(
//                                   '"${msg['transcription']}"',
//                                   style: const TextStyle(
//                                     fontSize: 12,
//                                     color: Colors.black87,
//                                   ),
//                                 ),
//                               ],
//                             ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'chat')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.grey[300]
//                                 : isReply
//                                 ? Colors.grey[100]
//                                 : Colors.grey[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomRight: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(msg['response'] ?? ''),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'spiral')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.orange[200]
//                                 : isReply
//                                 ? Colors.orange[50]
//                                 : Colors.orange[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(
//                             "🌀 Stage: ${msg['stage'] ?? ''}",
//                             style: const TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 6),
//                           Text(
//                             "❓ ${msg['question'] ?? ''}",
//                             style: const TextStyle(
//                               fontStyle: FontStyle.italic,
//                               fontSize: 14,
//                             ),
//                           ),
//                           if ((msg['growth'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 '"${msg['growth']}"',
//                                 style: const TextStyle(
//                                   fontSize: 13,
//                                   fontStyle: FontStyle.italic,
//                                   color: Colors.black,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                           if ((msg['evolution'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 msg['evolution'],
//                                 style: const TextStyle(
//                                   color: Colors.green,
//                                   fontWeight: FontWeight.w600,
//                                 ),
//                               ),
//                             ),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'error')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: Colors.red[100],
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Text(
//                         "❌ ${msg['message'] ?? 'Error'}",
//                         style: const TextStyle(color: Colors.red),
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     if (_isInitializing) {
//       return Scaffold(
//         body: Center(
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               CircularProgressIndicator(),
//               SizedBox(height: 20),
//               Text('Loading your reflections...'),
//             ],
//           ),
//         ),
//       );
//     }

//     return Scaffold(
//       appBar:
//           _isSelecting
//               ? _buildSelectionAppBar()
//               : AppBar(
//                 title: const Text("Reflect & Chat"),
//                 actions: [
//                   IconButton(
//                     icon: const Icon(Icons.show_chart),
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder:
//                               (context) => const SpiralEvolutionChartScreen(),
//                         ),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           final displayMessages = getMessagesWithDateHeaders();
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 _buildReplyPreview(),
//                 Expanded(
//                   child: ListView.builder(
//                     controller: _scrollController,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: displayMessages.length,
//                     itemBuilder:
//                         (context, index) =>
//                             buildChatBubble(displayMessages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.only(
//                     left: 12,
//                     right: 12,
//                     top: 10,
//                     bottom: 20,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText:
//                                 selectedMessage != null
//                                     ? "Replying..."
//                                     : "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;
//   Duration? _duration;
//   Duration? _position;

//   @override
//   void initState() {
//     super.initState();
//     _player.durationStream.listen((duration) {
//       setState(() => _duration = duration);
//     });
//     _player.positionStream.listen((position) {
//       setState(() => _position = position);
//     });
//     _player.playerStateStream.listen((state) {
//       if (state.processingState == ProcessingState.completed) {
//         setState(() => _isPlaying = false);
//       }
//     });
//   }

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       try {
//         if (widget.filePath.startsWith('http')) {
//           await _player.setUrl(widget.filePath);
//         } else {
//           await _player.setFilePath(widget.filePath);
//         }
//         await _player.play();
//       } catch (e) {
//         debugPrint('Error playing audio: $e');
//       }
//     }
//     setState(() => _isPlaying = !_isPlaying);
//   }

//   String _formatDuration(Duration? duration) {
//     if (duration == null) return '--:--';
//     final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
//     final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
//     return '$minutes:$seconds';
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(
//             _isPlaying ? Icons.pause : Icons.play_arrow,
//             color: Colors.blueGrey[800],
//             size: 24,
//           ),
//           onPressed: _togglePlayPause,
//         ),
//         Expanded(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               SliderTheme(
//                 data: SliderTheme.of(context).copyWith(
//                   activeTrackColor: Colors.blueGrey[600],
//                   inactiveTrackColor: Colors.blueGrey[200],
//                   trackHeight: 2,
//                   thumbColor: Colors.blueGrey[600],
//                   thumbShape: const RoundSliderThumbShape(
//                     enabledThumbRadius: 6,
//                   ),
//                   overlayColor: Colors.blueGrey.withAlpha(32),
//                   overlayShape: const RoundSliderOverlayShape(
//                     overlayRadius: 12,
//                   ),
//                 ),
//                 child: Slider(
//                   value: (_position ?? Duration.zero).inMilliseconds.toDouble(),
//                   min: 0,
//                   max: _duration?.inMilliseconds.toDouble() ?? 1,
//                   onChanged: (value) {
//                     _player.seek(Duration(milliseconds: value.toInt()));
//                   },
//                 ),
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text(
//                     _formatDuration(_position),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                   Text(
//                     _formatDuration(_duration),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ],
//           ),
//         ),
//       ],
//     );
//   }
// }
// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/spiral_evolution_chart.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   bool _isInitializing = true;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//   bool _isSelecting = false;
//   List<String> selectedMessageIds = [];
//   final ScrollController _scrollController = ScrollController();

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;
//   DateTime? _lastTaskCheck;

//   @override
//   void initState() {
//     super.initState();
//     _initializeData();
//   }

//   @override
//   void dispose() {
//     _scrollController.dispose();
//     super.dispose();
//   }

//   Future<void> _initializeData() async {
//     setState(() => _isInitializing = true);
//     await _requestPermissions();
//     await _loadMessages();
//     await _checkAndAddDailyTask();
//     setState(() => _isInitializing = false);

//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       if (_scrollController.hasClients) {
//         _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//       }
//     });
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _checkAndAddDailyTask() async {
//     final now = DateTime.now();
//     if (_lastTaskCheck != null &&
//         now.difference(_lastTaskCheck!) < Duration(minutes: 5)) {
//       return;
//     }
//     _lastTaskCheck = now;

//     final today = DateTime.now();
//     final todayStr = DateFormat('yyyy-MM-dd').format(today);

//     try {
//       final querySnapshot =
//           await firestore
//               .collection('users')
//               .doc(user!.uid)
//               .collection('mergedMessages')
//               .where('type', isEqualTo: 'daily-task')
//               .where(
//                 'timestamp',
//                 isGreaterThanOrEqualTo: DateTime(
//                   today.year,
//                   today.month,
//                   today.day,
//                 ),
//               )
//               .where(
//                 'timestamp',
//                 isLessThan: DateTime(today.year, today.month, today.day + 1),
//               )
//               .limit(1)
//               .get();

//       if (querySnapshot.docs.isEmpty) {
//         await _addDailyTaskMessage();
//       }
//     } catch (e) {
//       debugPrint('Error checking for daily task: $e');
//       final hasDailyTask = messages.any((msg) {
//         if (msg['type'] == 'daily-task') {
//           DateTime timestamp;
//           if (msg['timestamp'] is Timestamp) {
//             timestamp = (msg['timestamp'] as Timestamp).toDate();
//           } else if (msg['timestamp'] is String) {
//             timestamp = DateTime.parse(msg['timestamp']);
//           } else {
//             timestamp = msg['timestamp'];
//           }
//           return DateFormat('yyyy-MM-dd').format(timestamp) == todayStr;
//         }
//         return false;
//       });

//       if (!hasDailyTask) {
//         await _addDailyTaskMessage();
//       }
//     }
//   }

//   Future<void> _addDailyTaskMessage() async {
//     try {
//       final response = await http.get(
//         Uri.parse('http://10.206.190.126:5000/daily_task?user_id=${user!.uid}'),
//       );

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//         final today = DateTime(now.year, now.month, now.day);

//         final taskMessage = {
//           'type': 'daily-task',
//           'message': data['task'] ?? 'Your daily reflection task',
//           'timestamp': today,
//           'task_id': data['timestamp'],
//           'completed': data['completed'] ?? false,
//         };

//         await _storeMessage(taskMessage);
//         await _loadMessages();
//       }
//     } catch (e) {
//       debugPrint('Error loading daily task: $e');
//     }
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://10.206.190.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage != null
//                   ? (selectedMessage?['question'] ??
//                       selectedMessage?['response'] ??
//                       selectedMessage?['user'] ??
//                       selectedMessage?['message'] ??
//                       "")
//                   : "",
//           "is_spiral_reply":
//               selectedMessage != null && selectedMessage?['type'] == 'spiral',
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'audio_url': data['audio_url'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         setState(() {
//           messages.add({
//             'type': 'error',
//             'message':
//                 'Server error: ${response.statusCode} - ${response.body}',
//             'timestamp': now,
//           });
//         });
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Network error: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     final docRef = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add({...msg, 'id': docRef.id}));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("❌ Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("❌ Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     setState(() => isLoading = true);
//     final uri = Uri.parse("http://10.206.190.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri);
//     request.fields['last_stage'] = lastStage ?? '';
//     request.fields['reply_to'] =
//         selectedMessage != null
//             ? (selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "")
//             : "";
//     request.fields['is_spiral_reply'] =
//         (selectedMessage != null && selectedMessage?['type'] == 'spiral')
//             .toString();
//     request.files.add(
//       await http.MultipartFile.fromPath(
//         'audio',
//         file.path,
//         contentType: MediaType('audio', 'wav'),
//       ),
//     );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'transcription': data['transcription'] ?? '',
//           'type': data['mode'],
//           if (selectedMessage != null) 'reply_to_id': selectedMessage?['id'],
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//           'diarized': data['diarized'] ?? false,
//           'speaker_stages': data['speaker_stages'] ?? {},
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//         } else {
//           msg['stage'] = data['stage'] ?? '';
//           msg['question'] = data['question'] ?? '';
//           msg['growth'] = data['growth'] ?? '';
//           msg['evolution'] = data['evolution'] ?? '';
//           msg['audio_url'] = data['audio_url'] ?? '';
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       setState(() {
//         messages.add({
//           'type': 'error',
//           'message': 'Voice processing failed: ${e.toString()}',
//           'timestamp': DateTime.now(),
//         });
//       });
//     } finally {
//       setState(() => isLoading = false);
//       WidgetsBinding.instance.addPostFrameCallback((_) {
//         if (_scrollController.hasClients) {
//           _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
//         }
//       });
//     }
//   }

//   List<Map<String, dynamic>> getMessagesWithDateHeaders() {
//     List<Map<String, dynamic>> processed = [];
//     String? lastDate;

//     for (final msg in messages) {
//       final timestamp =
//           msg['timestamp'] is Timestamp
//               ? (msg['timestamp'] as Timestamp).toDate()
//               : msg['timestamp'] is String
//               ? DateTime.parse(msg['timestamp'])
//               : DateTime.now();
//       final dateStr = DateFormat('yyyy-MM-dd').format(timestamp);

//       if (lastDate != dateStr) {
//         processed.add({'type': 'date-header', 'date': timestamp});
//         lastDate = dateStr;
//       }

//       processed.add(msg);
//     }

//     return processed;
//   }

//   void _toggleMessageSelection(String messageId) {
//     setState(() {
//       if (selectedMessageIds.contains(messageId)) {
//         selectedMessageIds.remove(messageId);
//       } else {
//         selectedMessageIds.add(messageId);
//       }
//       _isSelecting = selectedMessageIds.isNotEmpty;
//     });
//   }

//   void _cancelSelection() {
//     setState(() {
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   void _setReplyToMessage(Map<String, dynamic> message) {
//     setState(() {
//       selectedMessage = message;
//       selectedMessageIds.clear();
//       _isSelecting = false;
//     });
//   }

//   PreferredSizeWidget _buildSelectionAppBar() {
//     return AppBar(
//       leading: IconButton(
//         icon: const Icon(Icons.close),
//         onPressed: _cancelSelection,
//       ),
//       title: Text('${selectedMessageIds.length} selected'),
//       actions: [
//         IconButton(
//           icon: const Icon(Icons.reply),
//           onPressed: () {
//             if (selectedMessageIds.length == 1) {
//               final message = messages.firstWhere(
//                 (m) => m['id'] == selectedMessageIds.first,
//                 orElse: () => {},
//               );
//               if (message.isNotEmpty) {
//                 _setReplyToMessage(message);
//               }
//             }
//           },
//         ),
//       ],
//     );
//   }

//   Widget _buildReplyPreview() {
//     if (selectedMessage == null) return const SizedBox.shrink();

//     final replyText =
//         selectedMessage?['question'] ??
//         selectedMessage?['response'] ??
//         selectedMessage?['user'] ??
//         selectedMessage?['message'] ??
//         "";

//     return Container(
//       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       decoration: BoxDecoration(
//         color: Colors.grey[200],
//         border: Border(
//           left: BorderSide(
//             color:
//                 selectedMessage?['type'] == 'spiral'
//                     ? Colors.orange
//                     : Colors.blue,
//             width: 4,
//           ),
//         ),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               Text(
//                 selectedMessage?['type'] == 'spiral'
//                     ? '🌀 Replying to Spiral Stage'
//                     : '💬 Replying to Message',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color:
//                       selectedMessage?['type'] == 'spiral'
//                           ? Colors.orange
//                           : Colors.blue,
//                 ),
//               ),
//               IconButton(
//                 icon: const Icon(Icons.close, size: 20),
//                 onPressed: () {
//                   setState(() {
//                     selectedMessage = null;
//                   });
//                 },
//               ),
//             ],
//           ),
//           const SizedBox(height: 4),
//           Container(
//             constraints: const BoxConstraints(maxHeight: 150),
//             child: SingleChildScrollView(
//               child: Text(replyText, style: const TextStyle(fontSize: 14)),
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget _buildSpeakerStages(Map<String, dynamic> speakerStages) {
//     if (speakerStages.isEmpty) return const SizedBox.shrink();

//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         const SizedBox(height: 8),
//         Text(
//           "Speaker Analysis:",
//           style: TextStyle(
//             fontSize: 12,
//             fontWeight: FontWeight.bold,
//             color: Colors.blueGrey[800],
//           ),
//         ),
//         const SizedBox(height: 4),
//         ...speakerStages.entries.map((entry) {
//           final speaker = entry.key;
//           final data = entry.value;
//           return Padding(
//             padding: const EdgeInsets.only(bottom: 4),
//             child: RichText(
//               text: TextSpan(
//                 style: const TextStyle(fontSize: 12),
//                 children: [
//                   TextSpan(
//                     text: "$speaker: ",
//                     style: TextStyle(
//                       fontWeight: FontWeight.bold,
//                       color: Colors.blueGrey[800],
//                     ),
//                   ),
//                   TextSpan(
//                     text: data['stage'] ?? 'Unknown',
//                     style: TextStyle(color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ),
//           );
//         }).toList(),
//       ],
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     if (msg['type'] == 'date-header') {
//       return Center(
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 10),
//           padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
//           decoration: BoxDecoration(
//             color: Colors.grey[300],
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: Text(
//             DateFormat('EEEE, MMM d, yyyy').format(msg['date']),
//             style: const TextStyle(
//               fontSize: 12,
//               color: Colors.black87,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//         ),
//       );
//     }

//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : msg['timestamp'] is String
//             ? DateTime.parse(msg['timestamp'])
//             : DateTime.now();
//     final isSelected = selectedMessageIds.contains(msg['id']);
//     final isReply = msg['reply_to_id'] != null;

//     return GestureDetector(
//       onLongPress: () {
//         if (!_isSelecting) {
//           setState(() {
//             _isSelecting = true;
//             selectedMessageIds.add(msg['id']);
//           });
//         }
//       },
//       onTap: () {
//         if (_isSelecting) {
//           _toggleMessageSelection(msg['id']);
//         }
//       },
//       child: Container(
//         margin: const EdgeInsets.symmetric(vertical: 4),
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue[50] : Colors.transparent,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           children: [
//             if (isReply && msg['reply_to'] != null)
//               Padding(
//                 padding: const EdgeInsets.only(left: 16, top: 8, right: 16),
//                 child: Container(
//                   padding: const EdgeInsets.all(8),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[100],
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.grey[300]!),
//                   ),
//                   child: Row(
//                     children: [
//                       Container(
//                         width: 4,
//                         height: 40,
//                         color: Colors.grey,
//                         margin: const EdgeInsets.only(right: 8),
//                       ),
//                       Expanded(
//                         child: Text(
//                           msg['reply_to'],
//                           maxLines: 2,
//                           overflow: TextOverflow.ellipsis,
//                           style: const TextStyle(
//                             fontSize: 12,
//                             color: Colors.grey,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'daily-task')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color: Colors.purple[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           const Text(
//                             "📝 Inner Compass",
//                             style: TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 8),
//                           Text(msg['message'] ?? ''),
//                           const SizedBox(height: 8),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] != null && msg['user'] != '[Voice]')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.blue[300]
//                                 : isReply
//                                 ? Colors.blue[100]
//                                 : Colors.blue[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.end,
//                         children: [
//                           Text(
//                             msg['user'] ?? '',
//                             style: const TextStyle(color: Colors.black),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['user'] == '[Voice]' && msg['audioPath'] != null)
//               Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 16),
//                 child: Align(
//                   alignment: Alignment.centerRight,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(12),
//                       decoration: BoxDecoration(
//                         color: Colors.blueGrey[50],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomLeft: Radius.circular(12),
//                         ),
//                         border: Border.all(color: Colors.blueGrey[100]!),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Row(
//                             children: [
//                               Icon(
//                                 Icons.mic,
//                                 color: Colors.blueGrey[600],
//                                 size: 20,
//                               ),
//                               const SizedBox(width: 8),
//                               Text(
//                                 "Voice Message",
//                                 style: TextStyle(
//                                   fontWeight: FontWeight.bold,
//                                   color: Colors.blueGrey[800],
//                                 ),
//                               ),
//                             ],
//                           ),
//                           const SizedBox(height: 8),
//                           AudioPlayerWidget(filePath: msg['audioPath']),
//                           if (msg['transcription'] != null &&
//                               msg['transcription'].isNotEmpty)
//                             Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 const SizedBox(height: 8),
//                                 Text(
//                                   "Transcription:",
//                                   style: TextStyle(
//                                     fontSize: 12,
//                                     fontWeight: FontWeight.bold,
//                                     color: Colors.blueGrey[800],
//                                   ),
//                                 ),
//                                 const SizedBox(height: 4),
//                                 Text(
//                                   '"${msg['transcription']}"',
//                                   style: const TextStyle(
//                                     fontSize: 12,
//                                     color: Colors.black87,
//                                   ),
//                                 ),
//                                 if (msg['diarized'] == true &&
//                                     msg['speaker_stages'] != null)
//                                   _buildSpeakerStages(
//                                     Map<String, dynamic>.from(
//                                       msg['speaker_stages'],
//                                     ),
//                                   ),
//                               ],
//                             ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'chat')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.grey[300]
//                                 : isReply
//                                 ? Colors.grey[100]
//                                 : Colors.grey[200],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(12),
//                           topRight: Radius.circular(12),
//                           bottomRight: Radius.circular(12),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(msg['response'] ?? ''),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'spiral')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.all(14),
//                       decoration: BoxDecoration(
//                         color:
//                             isSelected
//                                 ? Colors.orange[200]
//                                 : isReply
//                                 ? Colors.orange[50]
//                                 : Colors.orange[100],
//                         borderRadius: const BorderRadius.only(
//                           topLeft: Radius.circular(16),
//                           topRight: Radius.circular(16),
//                           bottomRight: Radius.circular(16),
//                         ),
//                       ),
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Text(
//                             "🌀 Stage: ${msg['stage'] ?? ''}",
//                             style: const TextStyle(
//                               fontWeight: FontWeight.bold,
//                               fontSize: 16,
//                             ),
//                           ),
//                           const SizedBox(height: 6),
//                           Text(
//                             "❓ ${msg['question'] ?? ''}",
//                             style: const TextStyle(
//                               fontStyle: FontStyle.italic,
//                               fontSize: 14,
//                             ),
//                           ),
//                           if ((msg['growth'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 '"${msg['growth']}"',
//                                 style: const TextStyle(
//                                   fontSize: 13,
//                                   fontStyle: FontStyle.italic,
//                                   color: Colors.black,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                           if ((msg['evolution'] ?? '').isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: Text(
//                                 msg['evolution'],
//                                 style: const TextStyle(
//                                   color: Colors.green,
//                                   fontWeight: FontWeight.w600,
//                                 ),
//                               ),
//                             ),
//                           if (msg['audio_url'] != null &&
//                               msg['audio_url'].isNotEmpty)
//                             Padding(
//                               padding: const EdgeInsets.only(top: 8),
//                               child: AudioPlayerWidget(
//                                 filePath: msg['audio_url'],
//                               ),
//                             ),
//                           const SizedBox(height: 4),
//                           Text(
//                             DateFormat('hh:mm a').format(timestamp),
//                             style: const TextStyle(
//                               fontSize: 10,
//                               color: Colors.black54,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//             if (msg['type'] == 'error')
//               Padding(
//                 padding: const EdgeInsets.symmetric(
//                   horizontal: 16,
//                   vertical: 6,
//                 ),
//                 child: Align(
//                   alignment: Alignment.centerLeft,
//                   child: ConstrainedBox(
//                     constraints: BoxConstraints(
//                       maxWidth: MediaQuery.of(context).size.width * 0.8,
//                     ),
//                     child: Container(
//                       padding: const EdgeInsets.symmetric(
//                         vertical: 10,
//                         horizontal: 14,
//                       ),
//                       decoration: BoxDecoration(
//                         color: Colors.red[100],
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Text(
//                         "❌ ${msg['message'] ?? 'Error'}",
//                         style: const TextStyle(color: Colors.red),
//                       ),
//                     ),
//                   ),
//                 ),
//               ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     if (_isInitializing) {
//       return Scaffold(
//         body: Center(
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               CircularProgressIndicator(),
//               SizedBox(height: 20),
//               Text('Loading your reflections...'),
//             ],
//           ),
//         ),
//       );
//     }

//     return Scaffold(
//       appBar:
//           _isSelecting
//               ? _buildSelectionAppBar()
//               : AppBar(
//                 title: const Text("Reflect & Chat"),
//                 actions: [
//                   IconButton(
//                     icon: const Icon(Icons.show_chart),
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder:
//                               (context) => const SpiralEvolutionChartScreen(),
//                         ),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           final displayMessages = getMessagesWithDateHeaders();
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 _buildReplyPreview(),
//                 Expanded(
//                   child: ListView.builder(
//                     controller: _scrollController,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: displayMessages.length,
//                     itemBuilder:
//                         (context, index) =>
//                             buildChatBubble(displayMessages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.only(
//                     left: 12,
//                     right: 12,
//                     top: 10,
//                     bottom: 20,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText:
//                                 selectedMessage != null
//                                     ? "Replying..."
//                                     : "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;
//   Duration? _duration;
//   Duration? _position;

//   @override
//   void initState() {
//     super.initState();
//     _player.durationStream.listen((duration) {
//       setState(() => _duration = duration);
//     });
//     _player.positionStream.listen((position) {
//       setState(() => _position = position);
//     });
//     _player.playerStateStream.listen((state) {
//       if (state.processingState == ProcessingState.completed) {
//         setState(() => _isPlaying = false);
//       }
//     });
//   }

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       try {
//         if (widget.filePath.startsWith('http')) {
//           await _player.setUrl(widget.filePath);
//         } else {
//           await _player.setFilePath(widget.filePath);
//         }
//         await _player.play();
//       } catch (e) {
//         debugPrint('Error playing audio: $e');
//       }
//     }
//     setState(() => _isPlaying = !_isPlaying);
//   }

//   String _formatDuration(Duration? duration) {
//     if (duration == null) return '--:--';
//     final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
//     final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
//     return '$minutes:$seconds';
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(
//             _isPlaying ? Icons.pause : Icons.play_arrow,
//             color: Colors.blueGrey[800],
//             size: 24,
//           ),
//           onPressed: _togglePlayPause,
//         ),
//         Expanded(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               SliderTheme(
//                 data: SliderTheme.of(context).copyWith(
//                   activeTrackColor: Colors.blueGrey[600],
//                   inactiveTrackColor: Colors.blueGrey[200],
//                   trackHeight: 2,
//                   thumbColor: Colors.blueGrey[600],
//                   thumbShape: const RoundSliderThumbShape(
//                     enabledThumbRadius: 6,
//                   ),
//                   overlayColor: Colors.blueGrey.withAlpha(32),
//                   overlayShape: const RoundSliderOverlayShape(
//                     overlayRadius: 12,
//                   ),
//                 ),
//                 child: Slider(
//                   value: (_position ?? Duration.zero).inMilliseconds.toDouble(),
//                   min: 0,
//                   max: _duration?.inMilliseconds.toDouble() ?? 1,
//                   onChanged: (value) {
//                     _player.seek(Duration(milliseconds: value.toInt()));
//                   },
//                 ),
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text(
//                     _formatDuration(_position),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                   Text(
//                     _formatDuration(_duration),
//                     style: TextStyle(fontSize: 10, color: Colors.blueGrey[600]),
//                   ),
//                 ],
//               ),
//             ],
//           ),
//         ),
//       ],
//     );
//   }
// }