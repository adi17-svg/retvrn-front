// import 'package:flutter/material.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final TextEditingController _controller = TextEditingController();
//   bool isLoading = false;
//   String? chatResponse;
//   String? stage;
//   String? valuesSummary;
//   String? shadow;
//   String? portalPrompt;
//   String? dailyPractice;
//   String? badge;
//   int? stageIndex;
//   String? error;
//
//   Future<void> sendEntry(String text) async {
//     setState(() {
//       isLoading = true;
//       error = null;
//     });
//
//     final url = Uri.parse("http://192.168.192.126:5000/merged"); // Replace with your machine's local IP
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: json.encode({"text": text}),
//       );
//
//       final result = json.decode(response.body);
//
//       if (response.statusCode == 200) {
//         setState(() {
//           chatResponse = result["response"];
//           stage = result["stage"];
//           valuesSummary = result["values_summary"];
//           shadow = result["shadow"];
//           portalPrompt = result["portal_prompt"];
//           dailyPractice = result["daily_practice"];
//           badge = result["badge"];
//           stageIndex = result["stage_index"];
//         });
//       } else {
//         setState(() {
//           error = result["error"] ?? "Unknown error.";
//         });
//       }
//     } catch (e) {
//       setState(() {
//         error = "Failed to connect to server. Make sure phone and laptop are on the same Wi-Fi.";
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//
//   Widget buildChatCard() {
//     return Card(
//       elevation: 3,
//       margin: const EdgeInsets.all(12),
//       child: Padding(
//         padding: const EdgeInsets.all(16),
//         child: Text(chatResponse ?? "", style: const TextStyle(fontSize: 16)),
//       ),
//     );
//   }
//
//   Widget buildReflectionCard() {
//     return Card(
//       margin: const EdgeInsets.all(12),
//       shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
//       elevation: 4,
//       child: ExpansionTile(
//         title: Text("üåÄ Spiral Dynamics Reflection - $stage", style: const TextStyle(fontWeight: FontWeight.bold)),
//         children: [
//           buildTile("üå± Values", valuesSummary),
//           buildTile("‚ö†Ô∏è Shadow", shadow),
//           buildTile("üö™ Growth Prompt", portalPrompt),
//           buildTile("üßò Daily Practice", dailyPractice),
//           if (badge != null)
//             Padding(
//               padding: const EdgeInsets.all(12),
//               child: Chip(label: Text("üèÖ $badge")),
//             ),
//         ],
//       ),
//     );
//   }
//
//   Widget buildTile(String title, String? content) {
//     return ExpansionTile(
//       title: Text(title, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
//       children: [
//         Padding(
//           padding: const EdgeInsets.all(12.0),
//           child: Text(content ?? "Not available", style: const TextStyle(fontSize: 15)),
//         ),
//       ],
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Merged Chat & Reflect")),
//       body: Column(
//         children: [
//           Padding(
//             padding: const EdgeInsets.all(12),
//             child: TextField(
//               controller: _controller,
//               decoration: InputDecoration(
//                 labelText: "Write a thought or question...",
//                 border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
//               ),
//               minLines: 1,
//               maxLines: 4,
//             ),
//           ),
//           ElevatedButton(
//             onPressed: isLoading ? null : () {
//               FocusScope.of(context).unfocus();
//               sendEntry(_controller.text.trim());
//             },
//             child: isLoading ? const CircularProgressIndicator() : const Text("Send"),
//           ),
//           const SizedBox(height: 10),
//           if (error != null)
//             Padding(
//               padding: const EdgeInsets.all(12.0),
//               child: Text(error!, style: const TextStyle(color: Colors.red)),
//             ),
//           if (chatResponse != null) buildChatCard(),
//           if (stage != null) buildReflectionCard(),
//         ],
//       ),
//     );
//   }
// // }
// import 'package:flutter/material.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({Key? key}) : super(key: key);
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final TextEditingController _controller = TextEditingController();
//   String? responseText;
//   String? stage;
//   String? shadow;
//   String? portalPrompt;
//   String? selectedAnswer;
//   String? growthPrompt;
//   bool isLoading = false;
//   bool isSpiralMode = false;
//   bool answered = false;
//
//   Future<void> sendEntry(String entry) async {
//     setState(() {
//       isLoading = true;
//       responseText = null;
//       stage = null;
//       shadow = null;
//       portalPrompt = null;
//       growthPrompt = null;
//       selectedAnswer = null;
//       answered = false;
//     });
//
//     final url = Uri.parse("http://192.168.192.126:5000/merged"); // Replace with your IP
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         if (data['mode'] == 'chat') {
//           setState(() {
//             isSpiralMode = false;
//             responseText = data['response'];
//           });
//         } else if (data['mode'] == 'spiral') {
//           setState(() {
//             isSpiralMode = true;
//             stage = data['stage'];
//             shadow = data['shadow'];
//             portalPrompt = data['portal_prompt'];
//           });
//         }
//       } else {
//         setState(() {
//           responseText = "Error: ${response.statusCode}";
//         });
//       }
//     } catch (e) {
//       setState(() {
//         responseText = "Connection error: $e";
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//
//   Future<void> sendReflectionAnswer(String answer) async {
//     final url = Uri.parse("http://192.168.192.126:5000/growth_prompt"); // Same base IP
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "stage": stage,
//           "user_answer": answer,
//         }),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         setState(() {
//           growthPrompt = data['growth_prompt'];
//           answered = true;
//         });
//       } else {
//         setState(() {
//           growthPrompt = "Error fetching growth prompt.";
//         });
//       }
//     } catch (e) {
//       setState(() {
//         growthPrompt = "Network error: $e";
//       });
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: Padding(
//         padding: const EdgeInsets.all(16),
//         child: Column(
//           children: [
//             TextField(
//               controller: _controller,
//               maxLines: 3,
//               decoration: const InputDecoration(
//                 labelText: 'Enter your thoughts...',
//                 border: OutlineInputBorder(),
//               ),
//             ),
//             const SizedBox(height: 12),
//             ElevatedButton(
//               onPressed: isLoading
//                   ? null
//                   : () => sendEntry(_controller.text.trim()),
//               child: const Text("Send"),
//             ),
//             const SizedBox(height: 20),
//             if (isLoading)
//               const CircularProgressIndicator()
//             else if (responseText != null && !isSpiralMode)
//               Text(responseText ?? "", style: const TextStyle(fontSize: 16)),
//             if (isSpiralMode && stage != null)
//               Expanded(
//                 child: ListView(
//                   children: [
//                     Card(
//                       child: ListTile(
//                         title: Text("Spiral Stage: $stage"),
//                         subtitle: Text("Shadow: $shadow"),
//                       ),
//                     ),
//                     if (portalPrompt != null)
//                       Card(
//                         child: ExpansionTile(
//                           title: const Text("Reflective Question"),
//                           children: [
//                             Padding(
//                               padding: const EdgeInsets.all(8.0),
//                               child: Text(portalPrompt ?? ""),
//                             ),
//                             if (!answered)
//                               Padding(
//                                 padding: const EdgeInsets.symmetric(
//                                     horizontal: 8, vertical: 4),
//                                 child: Column(
//                                   crossAxisAlignment: CrossAxisAlignment.start,
//                                   children: [
//                                     const Text(
//                                       "Your Answer:",
//                                       style: TextStyle(
//                                           fontWeight: FontWeight.bold),
//                                     ),
//                                     const SizedBox(height: 8),
//                                     TextField(
//                                       onChanged: (value) =>
//                                       selectedAnswer = value,
//                                       decoration: const InputDecoration(
//                                         hintText: "Write your thoughts...",
//                                         border: OutlineInputBorder(),
//                                       ),
//                                     ),
//                                     const SizedBox(height: 10),
//                                     ElevatedButton(
//                                       onPressed: () {
//                                         if (selectedAnswer != null &&
//                                             selectedAnswer!.isNotEmpty) {
//                                           sendReflectionAnswer(selectedAnswer!);
//                                         }
//                                       },
//                                       child: const Text("Submit Answer"),
//                                     )
//                                   ],
//                                 ),
//                               ),
//                             if (answered && growthPrompt != null)
//                               Padding(
//                                 padding: const EdgeInsets.all(12.0),
//                                 child: Text(
//                                   "üå± Growth Suggestion:\n$growthPrompt",
//                                   style: const TextStyle(
//                                       fontSize: 16,
//                                       fontStyle: FontStyle.italic,
//                                       color: Colors.green),
//                                 ),
//                               ),
//                           ],
//                         ),
//                       ),
//                   ],
//                 ),
//               )
//           ],
//         ),
//       ),
//     );
//   }
// // }
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter/material.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('messages')
//         .doc(user!.uid)
//         .collection('chat')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> _saveMessage(Map<String, dynamic> message) async {
//     await firestore
//         .collection('messages')
//         .doc(user!.uid)
//         .collection('chat')
//         .add({
//       ...message,
//       'timestamp': FieldValue.serverTimestamp(),
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.192.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//           };
//           setState(() => messages.add(msg));
//           await _saveMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'shadow': data['shadow'],
//             'portal_prompt': data['portal_prompt'],
//             'user_answer': '',
//             'growth_prompt': '',
//             'answered': false,
//           };
//           setState(() => messages.add(msg));
//           await _saveMessage(msg);
//         }
//       }
//     } catch (_) {
//       setState(() {
//         messages.add({'type': 'error', 'message': 'Network error'});
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> sendReflectionAnswer(int index, String answer) async {
//     final url = Uri.parse("http://192.168.192.126:5000/growth_prompt");
//     final docId = messages[index]['id'];
//
//     final response = await http.post(
//       url,
//       headers: {"Content-Type": "application/json"},
//       body: jsonEncode({
//         "stage": messages[index]['stage'],
//         "user_answer": answer,
//       }),
//     );
//
//     if (response.statusCode == 200) {
//       final data = jsonDecode(response.body);
//       setState(() {
//         messages[index]['user_answer'] = answer;
//         messages[index]['growth_prompt'] = data['growth_prompt'];
//         messages[index]['answered'] = true;
//       });
//
//       await firestore
//           .collection('messages')
//           .doc(user!.uid)
//           .collection('chat')
//           .doc(docId)
//           .update({
//         'user_answer': answer,
//         'growth_prompt': data['growth_prompt'],
//         'answered': true,
//       });
//     }
//   }
//
//   Future<void> deleteMessage(int index) async {
//     final docId = messages[index]['id'];
//     await firestore
//         .collection('messages')
//         .doc(user!.uid)
//         .collection('chat')
//         .doc(docId)
//         .delete();
//     setState(() {
//       messages.removeAt(index);
//     });
//   }
//
//   Future<void> editMessage(int index, String newText) async {
//     final docId = messages[index]['id'];
//     await firestore
//         .collection('messages')
//         .doc(user!.uid)
//         .collection('chat')
//         .doc(docId)
//         .update({'user': newText});
//     setState(() {
//       messages[index]['user'] = newText;
//     });
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg, int index) {
//     final date = (msg['timestamp'] as Timestamp?)?.toDate();
//     final showDate = date != null
//         ? DateFormat.yMMMMd().format(date)
//         : "Unknown Date";
//
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         if (index == 0 ||
//             DateFormat.yMMMd().format(
//               (messages[index]['timestamp'] as Timestamp?)?.toDate() ??
//                   DateTime.now(),
//             ) !=
//                 DateFormat.yMMMd().format(
//                   (messages[index - 1]['timestamp'] as Timestamp?)?.toDate() ??
//                       DateTime.now(),
//                 ))
//           Padding(
//             padding: const EdgeInsets.symmetric(vertical: 8),
//             child: Center(
//               child: Text(showDate,
//                   style: const TextStyle(color: Colors.grey, fontSize: 12)),
//             ),
//           ),
//         GestureDetector(
//           onLongPress: () {
//             showModalBottomSheet(
//               context: context,
//               builder: (_) => Column(
//                 mainAxisSize: MainAxisSize.min,
//                 children: [
//                   ListTile(
//                     leading: const Icon(Icons.edit),
//                     title: const Text('Edit'),
//                     onTap: () {
//                       Navigator.pop(context);
//                       _showEditDialog(index, msg['user']);
//                     },
//                   ),
//                   ListTile(
//                     leading: const Icon(Icons.delete),
//                     title: const Text('Delete'),
//                     onTap: () {
//                       Navigator.pop(context);
//                       deleteMessage(index);
//                     },
//                   ),
//                 ],
//               ),
//             );
//           },
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 4),
//             padding: const EdgeInsets.all(10),
//             decoration: BoxDecoration(
//               color: msg['type'] == 'chat'
//                   ? Colors.blue.shade100
//                   : Colors.orange.shade100,
//               borderRadius: BorderRadius.circular(10),
//             ),
//             child: msg['type'] == 'chat'
//                 ? Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text("üßç You: ${msg['user']}",
//                     style: const TextStyle(fontWeight: FontWeight.bold)),
//                 const SizedBox(height: 4),
//                 Text("ü§ñ AI: ${msg['response']}"),
//               ],
//             )
//                 : Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text("üßç You: ${msg['user']}",
//                     style: const TextStyle(fontWeight: FontWeight.bold)),
//                 Text("üåÄ Stage: ${msg['stage']}"),
//                 Text("Shadow: ${msg['shadow']}"),
//                 const SizedBox(height: 4),
//                 Text("üîç Prompt: ${msg['portal_prompt']}"),
//                 if (!msg['answered'])
//                   Column(
//                     crossAxisAlignment: CrossAxisAlignment.start,
//                     children: [
//                       const SizedBox(height: 6),
//                       TextField(
//                         decoration: const InputDecoration(
//                           hintText: 'Reflect here...',
//                           border: OutlineInputBorder(),
//                         ),
//                         onChanged: (val) =>
//                         messages[index]['user_answer'] = val,
//                       ),
//                       ElevatedButton(
//                         onPressed: () {
//                           final a = messages[index]['user_answer'];
//                           if (a.isNotEmpty) {
//                             sendReflectionAnswer(index, a);
//                           }
//                         },
//                         child: const Text("Submit"),
//                       )
//                     ],
//                   ),
//                 if (msg['answered'])
//                   Text("üå± Growth: ${msg['growth_prompt']}"),
//               ],
//             ),
//           ),
//         ),
//       ],
//     );
//   }
//
//   void _showEditDialog(int index, String currentText) {
//     final controller = TextEditingController(text: currentText);
//     showDialog(
//       context: context,
//       builder: (_) => AlertDialog(
//         title: const Text("Edit Message"),
//         content: TextField(controller: controller),
//         actions: [
//           TextButton(
//             onPressed: () => Navigator.pop(context),
//             child: const Text("Cancel"),
//           ),
//           ElevatedButton(
//             onPressed: () {
//               editMessage(index, controller.text.trim());
//               Navigator.pop(context);
//             },
//             child: const Text("Save"),
//           )
//         ],
//       ),
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: Column(
//         children: [
//           Padding(
//             padding: const EdgeInsets.all(16),
//             child: TextField(
//               controller: _controller,
//               maxLines: 3,
//               decoration: const InputDecoration(
//                 labelText: 'Write your thoughts...',
//                 border: OutlineInputBorder(),
//               ),
//             ),
//           ),
//           ElevatedButton(
//             onPressed: isLoading
//                 ? null
//                 : () {
//               final text = _controller.text.trim();
//               if (text.isNotEmpty) sendEntry(text);
//             },
//             child:
//             isLoading ? const CircularProgressIndicator() : const Text("Send"),
//           ),
//           const Divider(),
//           Expanded(
//             child: ListView.builder(
//               padding: const EdgeInsets.all(12),
//               itemCount: messages.length,
//               itemBuilder: (context, index) =>
//                   buildChatBubble(messages[index], index),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }

// ‚úÖ merged_reflect_screen.dart
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('messages')
//         .doc(user!.uid)
//         .collection('chat')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.192.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//           };
//           setState(() => messages.add(msg));
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'shadow': data['shadow'],
//             'portal_prompt': data['portal_prompt'],
//             'user_answer': '',
//             'growth_prompt': '',
//             'answered': false,
//           };
//           setState(() => messages.add(msg));
//         }
//       }
//     } catch (_) {
//       setState(() => messages.add({'type': 'error', 'message': 'Network error'}));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     return Container(
//       margin: const EdgeInsets.symmetric(vertical: 6),
//       padding: const EdgeInsets.all(12),
//       decoration: BoxDecoration(
//         color: msg['type'] == 'chat' ? Colors.blue[100] : Colors.orange[100],
//         borderRadius: BorderRadius.circular(12),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Text("You: ${msg['user']}", style: const TextStyle(fontWeight: FontWeight.bold)),
//           if (msg['type'] == 'chat') ...[
//             const SizedBox(height: 4),
//             Text("AI: ${msg['response']}")
//           ] else if (msg['type'] == 'spiral') ...[
//             Text("Stage: ${msg['stage']}"),
//             Text("Shadow: ${msg['shadow']}"),
//             Text("Prompt: ${msg['portal_prompt']}"),
//             if (msg['answered'])
//               Text("Growth: ${msg['growth_prompt']}")
//           ]
//         ],
//       ),
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: ValueListenableBuilder(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Padding(
//                   padding: const EdgeInsets.all(16),
//                   child: TextField(
//                     controller: _controller,
//                     maxLines: 3,
//                     decoration: const InputDecoration(
//                       labelText: 'Write your thoughts...',
//                       border: OutlineInputBorder(),
//                     ),
//                   ),
//                 ),
//                 ElevatedButton(
//                   onPressed: isLoading
//                       ? null
//                       : () {
//                     final text = _controller.text.trim();
//                     if (text.isNotEmpty) sendEntry(text);
//                   },
//                   child: isLoading ? const CircularProgressIndicator() : const Text("Send"),
//                 ),
//                 const Divider(),
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//       floatingActionButton: SizedBox(
//         height: 80,
//         child: Row(
//           children: [
//             Expanded(
//               child: ListView.builder(
//                 scrollDirection: Axis.horizontal,
//                 itemCount: bgList.length,
//                 itemBuilder: (context, index) {
//                   return GestureDetector(
//                     onTap: () => selectedBgIndex.value = index,
//                     child: CircleAvatar(
//                       backgroundImage: AssetImage(bgList[index]),
//                       radius: 30,
//                       backgroundColor: selectedBgIndex.value == index ? Colors.white : Colors.transparent,
//                     ),
//                   );
//                 },
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.192.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'reason': data['reason'],
//             'portal_prompt': data['portal_prompt'],
//             'reply': data['reply'],
//             'badge': data['badge'],
//             'stage_index': data['stage_index'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         }
//       }
//     } catch (e) {
//       setState(() => messages.add({'type': 'error', 'message': 'Network error'}));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     return Container(
//       margin: const EdgeInsets.symmetric(vertical: 6),
//       padding: const EdgeInsets.all(12),
//       decoration: BoxDecoration(
//         color: msg['type'] == 'chat' ? Colors.blue[50] : Colors.orange[50],
//         borderRadius: BorderRadius.circular(12),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Text("üìù You: ${msg['user']}", style: const TextStyle(fontWeight: FontWeight.bold)),
//
//           if (msg['type'] == 'chat') ...[
//             const SizedBox(height: 6),
//             Text("ü§ñ AI: ${msg['response']}"),
//           ] else if (msg['type'] == 'spiral') ...[
//             const SizedBox(height: 8),
//             Text("üåÄ Stage: ${msg['stage']}"),
//             Text("üîé Reason: ${msg['reason']}"),
//             const Divider(),
//             Text(
//               msg['reply'] ?? '',
//               style: const TextStyle(fontSize: 14),
//             ),
//           ],
//           const SizedBox(height: 6),
//           Align(
//             alignment: Alignment.bottomRight,
//             child: Text(
//               DateFormat('hh:mm a').format(timestamp),
//               style: const TextStyle(fontSize: 12, color: Colors.grey),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Padding(
//                   padding: const EdgeInsets.all(16),
//                   child: TextField(
//                     controller: _controller,
//                     maxLines: 3,
//                     decoration: const InputDecoration(
//                       labelText: 'Write your thoughts...',
//                       border: OutlineInputBorder(),
//                     ),
//                   ),
//                 ),
//                 ElevatedButton(
//                   onPressed: isLoading
//                       ? null
//                       : () {
//                     final text = _controller.text.trim();
//                     if (text.isNotEmpty) sendEntry(text);
//                   },
//                   child: isLoading
//                       ? const SizedBox(
//                     height: 20,
//                     width: 20,
//                     child: CircularProgressIndicator(strokeWidth: 2),
//                   )
//                       : const Text("Send"),
//                 ),
//                 const Divider(),
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//       floatingActionButton: SizedBox(
//         height: 80,
//         child: Row(
//           children: [
//             Expanded(
//               child: ListView.builder(
//                 scrollDirection: Axis.horizontal,
//                 itemCount: bgList.length,
//                 itemBuilder: (context, index) {
//                   return GestureDetector(
//                     onTap: () => selectedBgIndex.value = index,
//                     child: CircleAvatar(
//                       backgroundImage: AssetImage(bgList[index]),
//                       radius: 30,
//                       backgroundColor: selectedBgIndex.value == index
//                           ? Colors.white
//                           : Colors.transparent,
//                     ),
//                   );
//                 },
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged"); // ‚úÖ Ensure IP is correct
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'values_summary': data['values_summary'],
//             'shadow': data['shadow'],
//             'portal_prompt': data['portal_prompt'],
//             'badge': data['badge'],
//             'stage_index': data['stage_index'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         }
//       } else {
//         print("‚ùå Server error: ${response.statusCode}");
//         print("üîç Body: ${response.body}");
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//         }));
//       }
//     } catch (e) {
//       print('‚ùå Network error: $e');
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}'
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     if (msg['type'] == 'error') {
//       return Container(
//         margin: const EdgeInsets.symmetric(vertical: 6),
//         padding: const EdgeInsets.all(12),
//         decoration: BoxDecoration(
//           color: Colors.red[50],
//           borderRadius: BorderRadius.circular(12),
//         ),
//         child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//       );
//     }
//
//     return Container(
//       margin: const EdgeInsets.symmetric(vertical: 6),
//       padding: const EdgeInsets.all(12),
//       decoration: BoxDecoration(
//         color: msg['type'] == 'chat' ? Colors.blue[50] : Colors.orange[50],
//         borderRadius: BorderRadius.circular(12),
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Text("üìù You: ${msg['user']}", style: const TextStyle(fontWeight: FontWeight.bold)),
//
//           if (msg['type'] == 'chat') ...[
//             const SizedBox(height: 6),
//             Text("ü§ñ AI: ${msg['response']}"),
//           ] else if (msg['type'] == 'spiral') ...[
//             const SizedBox(height: 8),
//             Text("üåÄ Stage: ${msg['stage']}"),
//             Text("üåü Values: ${msg['values_summary']}"),
//             Text("‚ö†Ô∏è Shadow: ${msg['shadow']}"),
//             const Divider(),
//             Text("ü™¨ Portal Prompt: ${msg['portal_prompt']}", style: const TextStyle(fontSize: 14)),
//             Text("üèÖ Badge: ${msg['badge']}"),
//           ],
//
//           const SizedBox(height: 6),
//           Align(
//             alignment: Alignment.bottomRight,
//             child: Text(
//               DateFormat('hh:mm a').format(timestamp),
//               style: const TextStyle(fontSize: 12, color: Colors.grey),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Padding(
//                   padding: const EdgeInsets.all(16),
//                   child: TextField(
//                     controller: _controller,
//                     maxLines: 3,
//                     decoration: const InputDecoration(
//                       labelText: 'Write your thoughts...',
//                       border: OutlineInputBorder(),
//                     ),
//                   ),
//                 ),
//                 ElevatedButton(
//                   onPressed: isLoading
//                       ? null
//                       : () {
//                     final text = _controller.text.trim();
//                     if (text.isNotEmpty) sendEntry(text);
//                   },
//                   child: isLoading
//                       ? const SizedBox(
//                     height: 20,
//                     width: 20,
//                     child: CircularProgressIndicator(strokeWidth: 2),
//                   )
//                       : const Text("Send"),
//                 ),
//                 const Divider(),
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//       floatingActionButton: SizedBox(
//         height: 80,
//         child: Row(
//           children: [
//             Expanded(
//               child: ListView.builder(
//                 scrollDirection: Axis.horizontal,
//                 itemCount: bgList.length,
//                 itemBuilder: (context, index) {
//                   return GestureDetector(
//                     onTap: () => selectedBgIndex.value = index,
//                     child: CircleAvatar(
//                       backgroundImage: AssetImage(bgList[index]),
//                       radius: 30,
//                       backgroundColor: selectedBgIndex.value == index
//                           ? Colors.white
//                           : Colors.transparent,
//                     ),
//                   );
//                 },
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
// Working code
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged"); // ‚úÖ Replace with your IP
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'values_summary': data['values_summary'],
//             'shadow': data['shadow'],
//             'portal_prompt': data['portal_prompt'],
//             'badge': data['badge'],
//             'stage_index': data['stage_index'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         }
//       } else {
//         print("‚ùå Server error: ${response.statusCode}");
//         print("üîç Body: ${response.body}");
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//           'timestamp': DateTime.now(),
//         }));
//       }
//     } catch (e) {
//       print('‚ùå Network error: $e');
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     final List<Widget> chatWidgets = [];
//
//     // USER MESSAGE (right aligned)
//     chatWidgets.add(
//       Align(
//         alignment: Alignment.centerRight,
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 6),
//           padding: const EdgeInsets.all(12),
//           constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
//           decoration: BoxDecoration(
//             color: Colors.blue[200],
//             borderRadius: BorderRadius.circular(12),
//           ),
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.end,
//             children: [
//               Text(msg['user'], style: const TextStyle(color: Colors.black)),
//               const SizedBox(height: 4),
//               Text(
//                 DateFormat('hh:mm a').format(timestamp),
//                 style: const TextStyle(fontSize: 10, color: Colors.black54),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//
//     // SYSTEM RESPONSE (left aligned)
//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(msg['response'], style: const TextStyle(color: Colors.black)),
//                 const SizedBox(height: 4),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10, color: Colors.black54),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.85),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold)),
//                 Text("üåü Values: ${msg['values_summary']}"),
//                 Text("‚ö†Ô∏è Shadow: ${msg['shadow']}"),
//                 const SizedBox(height: 6),
//                 Text("ü™¨ Portal Prompt: ${msg['portal_prompt']}", style: const TextStyle(fontStyle: FontStyle.italic)),
//                 Text("üèÖ Badge: ${msg['badge']}"),
//                 const SizedBox(height: 4),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10, color: Colors.black54),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'error') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.red[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//           ),
//         ),
//       );
//     }
//
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.stretch,
//       children: chatWidgets,
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     reverse: false,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           maxLines: 2,
//                           minLines: 1,
//                           decoration: InputDecoration(
//                             hintText: "Type a message...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                           ),
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       ElevatedButton(
//                         onPressed: isLoading
//                             ? null
//                             : () {
//                           final text = _controller.text.trim();
//                           if (text.isNotEmpty) sendEntry(text);
//                         },
//                         style: ElevatedButton.styleFrom(
//                           shape: const CircleBorder(),
//                           padding: const EdgeInsets.all(14),
//                         ),
//                         child: isLoading
//                             ? const CircularProgressIndicator(strokeWidth: 2)
//                             : const Icon(Icons.send),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//       floatingActionButton: SizedBox(
//         height: 80,
//         child: Row(
//           children: [
//             Expanded(
//               child: ListView.builder(
//                 scrollDirection: Axis.horizontal,
//                 itemCount: bgList.length,
//                 itemBuilder: (context, index) {
//                   return GestureDetector(
//                     onTap: () => selectedBgIndex.value = index,
//                     child: CircleAvatar(
//                       backgroundImage: AssetImage(bgList[index]),
//                       radius: 30,
//                       backgroundColor: selectedBgIndex.value == index
//                           ? Colors.white
//                           : Colors.transparent,
//                     ),
//                   );
//                 },
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// // }
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged"); // üîÅ Update if needed
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//         final now = DateTime.now();
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'values_summary': data['values_summary'],
//             'shadow': data['shadow'],
//             'portal_prompt': data['portal_prompt'],
//             'badge': data['badge'],
//             'stage_index': data['stage_index'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         }
//       } else {
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//           'timestamp': DateTime.now(),
//         }));
//       }
//     } catch (e) {
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     final List<Widget> chatWidgets = [];
//
//     // User Message
//     chatWidgets.add(
//       Align(
//         alignment: Alignment.centerRight,
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 6),
//           padding: const EdgeInsets.all(12),
//           constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
//           decoration: BoxDecoration(
//             color: Colors.blue[200],
//             borderRadius: BorderRadius.circular(12),
//           ),
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.end,
//             children: [
//               Text(msg['user'], style: const TextStyle(color: Colors.black)),
//               const SizedBox(height: 4),
//               Text(
//                 DateFormat('hh:mm a').format(timestamp),
//                 style: const TextStyle(fontSize: 10, color: Colors.black54),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//
//     // Response from system
//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(msg['response'], style: const TextStyle(color: Colors.black)),
//                 const SizedBox(height: 4),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10, color: Colors.black54),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.88),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
//                 const SizedBox(height: 4),
//                 Text("üåü Values: ${msg['values_summary']}", style: const TextStyle(fontSize: 14)),
//                 const SizedBox(height: 2),
//                 Text("‚ö†Ô∏è Shadow: ${msg['shadow']}", style: const TextStyle(fontSize: 14, color: Colors.redAccent)),
//                 const SizedBox(height: 8),
//                 Text("ü™¨ Portal Prompt:\n${msg['portal_prompt']}",
//                     style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 14)),
//                 const SizedBox(height: 6),
//                 Text("üèÖ Badge: ${msg['badge']}", style: const TextStyle(fontWeight: FontWeight.w500)),
//                 const SizedBox(height: 6),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10, color: Colors.black54),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'error') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.red[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//           ),
//         ),
//       );
//     }
//
//     return Column(crossAxisAlignment: CrossAxisAlignment.stretch, children: chatWidgets);
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     reverse: false,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           maxLines: 2,
//                           minLines: 1,
//                           decoration: InputDecoration(
//                             hintText: "Type a message...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                           ),
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       ElevatedButton(
//                         onPressed: isLoading
//                             ? null
//                             : () {
//                           final text = _controller.text.trim();
//                           if (text.isNotEmpty) sendEntry(text);
//                         },
//                         style: ElevatedButton.styleFrom(
//                           shape: const CircleBorder(),
//                           padding: const EdgeInsets.all(14),
//                         ),
//                         child: isLoading
//                             ? const CircularProgressIndicator(strokeWidth: 2)
//                             : const Icon(Icons.send),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//       floatingActionButton: SizedBox(
//         height: 80,
//         child: Row(
//           children: [
//             Expanded(
//               child: ListView.builder(
//                 scrollDirection: Axis.horizontal,
//                 itemCount: bgList.length,
//                 itemBuilder: (context, index) {
//                   return GestureDetector(
//                     onTap: () => selectedBgIndex.value = index,
//                     child: CircleAvatar(
//                       backgroundImage: AssetImage(bgList[index]),
//                       radius: 30,
//                       backgroundColor: selectedBgIndex.value == index
//                           ? Colors.white
//                           : Colors.transparent,
//                     ),
//                   );
//                 },
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
// //
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({"text": entry}),
//       );
//
//       final now = DateTime.now();
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': data['stage'],
//             'values_summary': data['values_summary'],
//             'shadow': data['shadow'],
//             'portal_prompt': data['portal_prompt'],
//             'badge': data['badge'],
//             'stage_index': data['stage_index'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         }
//       } else {
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//           'timestamp': now,
//         }));
//       }
//     } catch (e) {
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     final List<Widget> chatWidgets = [];
//
//     // User Message
//     chatWidgets.add(
//       Align(
//         alignment: Alignment.centerRight,
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 6),
//           padding: const EdgeInsets.all(12),
//           constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
//           decoration: BoxDecoration(
//             color: Colors.blue[200],
//             borderRadius: BorderRadius.circular(12),
//           ),
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.end,
//             children: [
//               Text(msg['user'], style: const TextStyle(color: Colors.black)),
//               const SizedBox(height: 4),
//               Text(
//                 DateFormat('hh:mm a').format(timestamp),
//                 style: const TextStyle(fontSize: 10, color: Colors.black54),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//
//     // Spiral or Chat Response
//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(msg['response'], style: const TextStyle(color: Colors.black)),
//                 const SizedBox(height: 4),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10, color: Colors.black54),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.88),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
//                 const SizedBox(height: 4),
//                 Text("üåü Values: ${msg['values_summary']}", style: const TextStyle(fontSize: 14)),
//                 const SizedBox(height: 2),
//                 Text("‚ö†Ô∏è Shadow: ${msg['shadow']}", style: const TextStyle(fontSize: 14, color: Colors.redAccent)),
//                 const SizedBox(height: 8),
//                 Text("ü™¨ Portal Prompt:\n${msg['portal_prompt']}",
//                     style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 14)),
//                 const SizedBox(height: 6),
//                 Text("üèÖ Badge: ${msg['badge']}", style: const TextStyle(fontWeight: FontWeight.w500)),
//                 const SizedBox(height: 6),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10, color: Colors.black54),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'error') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.red[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//           ),
//         ),
//       );
//     }
//
//     return Column(crossAxisAlignment: CrossAxisAlignment.stretch, children: chatWidgets);
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Reflect & Chat')),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     reverse: false,
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           maxLines: 2,
//                           minLines: 1,
//                           decoration: InputDecoration(
//                             hintText: "Type a message...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                           ),
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       ElevatedButton(
//                         onPressed: isLoading
//                             ? null
//                             : () {
//                           final text = _controller.text.trim();
//                           if (text.isNotEmpty) sendEntry(text);
//                         },
//                         style: ElevatedButton.styleFrom(
//                           shape: const CircleBorder(),
//                           padding: const EdgeInsets.all(14),
//                         ),
//                         child: isLoading
//                             ? const CircularProgressIndicator(strokeWidth: 2)
//                             : const Icon(Icons.send),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// // // }
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//
//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && msg['stage'] != null && msg['stage'] != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//         }),
//       );
//
//       final now = DateTime.now();
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             'type': 'chat',
//             'user': entry,
//             'response': data['response'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'];
//           lastStage = newStage;
//
//           final msg = {
//             'type': 'spiral',
//             'user': entry,
//             'stage': newStage,
//             'question': data['question'],
//             'evolution': data['evolution'],
//             'timestamp': now,
//           };
//           await _storeMessage(msg);
//         }
//       } else {
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//           'timestamp': now,
//         }));
//       }
//     } catch (e) {
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     final List<Widget> chatWidgets = [];
//
//     // User entry
//     chatWidgets.add(
//       Align(
//         alignment: Alignment.centerRight,
//         child: Container(
//           margin: const EdgeInsets.symmetric(vertical: 6),
//           padding: const EdgeInsets.all(12),
//           decoration: BoxDecoration(
//             color: Colors.blue[200],
//             borderRadius: BorderRadius.circular(12),
//           ),
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.end,
//             children: [
//               Text(msg['user'], style: const TextStyle(color: Colors.black)),
//               Text(DateFormat('hh:mm a').format(timestamp), style: const TextStyle(fontSize: 10)),
//             ],
//           ),
//         ),
//       ),
//     );
//
//     // Response from system
//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text(msg['response']),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
//                 const SizedBox(height: 6),
//                 Text("‚ùì ${msg['question']}", style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 14)),
//                 if (msg['evolution'] != null) ...[
//                   const SizedBox(height: 8),
//                   Text(msg['evolution'], style: const TextStyle(color: Colors.green, fontWeight: FontWeight.w600)),
//                 ],
//               ],
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'error') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.red[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//           ),
//         ),
//       );
//     }
//
//     return Column(children: chatWidgets);
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           maxLines: 2,
//                           minLines: 1,
//                           decoration: InputDecoration(
//                             hintText: "Type a message...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                           ),
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       ElevatedButton(
//                         onPressed: isLoading
//                             ? null
//                             : () {
//                           final text = _controller.text.trim();
//                           if (text.isNotEmpty) sendEntry(text);
//                         },
//                         style: ElevatedButton.styleFrom(
//                           shape: const CircleBorder(),
//                           padding: const EdgeInsets.all(14),
//                         ),
//                         child: isLoading
//                             ? const CircularProgressIndicator(strokeWidth: 2)
//                             : const Icon(Icons.send),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// // }
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//
//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && msg['stage'] != null && msg['stage'] != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to": selectedMessage != null
//               ? (selectedMessage!['question'] ??
//               selectedMessage!['response'] ??
//               selectedMessage!['user'] ??
//               selectedMessage!['message'] ??
//               "")
//               : "",
//         }),
//       );
//
//       final now = DateTime.now();
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//
//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to': selectedMessage!['question'] ??
//                 selectedMessage!['response'] ??
//                 selectedMessage!['user'] ??
//                 selectedMessage!['message'],
//         };
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'],
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'];
//           lastStage = newStage;
//
//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'],
//             'evolution': data['evolution'],
//           };
//           await _storeMessage(msg);
//         }
//
//         selectedMessage = null;
//       } else {
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//           'timestamp': now,
//         }));
//       }
//     } catch (e) {
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     final List<Widget> chatWidgets = [];
//
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;
//
//     // User message
//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () {
//           setState(() => selectedMessage = msg);
//         },
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 12, color: Colors.black87),
//                     ),
//                   ),
//                 Text(msg['user'], style: const TextStyle(color: Colors.black)),
//                 Text(DateFormat('hh:mm a').format(timestamp), style: const TextStyle(fontSize: 10)),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//
//     // Bot/system response
//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         GestureDetector(
//           onLongPress: () {
//             setState(() => selectedMessage = msg);
//           },
//           child: Align(
//             alignment: Alignment.centerLeft,
//             child: Container(
//               margin: const EdgeInsets.symmetric(vertical: 6),
//               padding: const EdgeInsets.all(12),
//               decoration: BoxDecoration(
//                 color: Colors.grey[200],
//                 borderRadius: BorderRadius.circular(12),
//               ),
//               child: Text(msg['response']),
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         GestureDetector(
//           onLongPress: () {
//             setState(() => selectedMessage = msg);
//           },
//           child: Align(
//             alignment: Alignment.centerLeft,
//             child: Container(
//               margin: const EdgeInsets.symmetric(vertical: 6),
//               padding: const EdgeInsets.all(14),
//               decoration: BoxDecoration(
//                 color: Colors.orange[100],
//                 borderRadius: BorderRadius.circular(16),
//               ),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
//                   const SizedBox(height: 6),
//                   Text("‚ùì ${msg['question']}", style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 14)),
//                   if (msg['evolution'] != null) ...[
//                     const SizedBox(height: 8),
//                     Text(msg['evolution'], style: const TextStyle(color: Colors.green, fontWeight: FontWeight.w600)),
//                   ],
//                 ],
//               ),
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'error') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.red[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//           ),
//         ),
//       );
//     }
//
//     return Column(children: chatWidgets);
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 if (selectedMessage != null)
//                   Container(
//                     margin: const EdgeInsets.symmetric(horizontal: 12),
//                     padding: const EdgeInsets.all(8),
//                     decoration: BoxDecoration(
//                       color: Colors.grey[300],
//                       borderRadius: BorderRadius.circular(8),
//                     ),
//                     child: Row(
//                       mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                       children: [
//                         Expanded(
//                           child: Text(
//                             "‚Ü™Ô∏è ${selectedMessage!['question'] ?? selectedMessage!['response'] ?? selectedMessage!['user'] ?? selectedMessage!['message']}",
//                             style: const TextStyle(fontSize: 12, fontStyle: FontStyle.italic),
//                             overflow: TextOverflow.ellipsis,
//                           ),
//                         ),
//                         IconButton(
//                           icon: const Icon(Icons.close),
//                           onPressed: () => setState(() => selectedMessage = null),
//                         )
//                       ],
//                     ),
//                   ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           maxLines: 2,
//                           minLines: 1,
//                           decoration: InputDecoration(
//                             hintText: "Type a message...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                           ),
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       ElevatedButton(
//                         onPressed: isLoading
//                             ? null
//                             : () {
//                           final text = _controller.text.trim();
//                           if (text.isNotEmpty) sendEntry(text);
//                         },
//                         style: ElevatedButton.styleFrom(
//                           shape: const CircleBorder(),
//                           padding: const EdgeInsets.all(14),
//                         ),
//                         child: isLoading
//                             ? const CircularProgressIndicator(strokeWidth: 2)
//                             : const Icon(Icons.send),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }
// ... (same imports and initial setup)
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:intl/intl.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import '../data/bg_data.dart';
// import '../main.dart';
//
// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});
//
//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }
//
// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//   }
//
//   Future<void> _loadMessages() async {
//     final snapshot = await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .orderBy('timestamp')
//         .get();
//
//     setState(() {
//       messages = snapshot.docs
//           .map((doc) => doc.data()..['id'] = doc.id)
//           .cast<Map<String, dynamic>>()
//           .toList();
//
//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && msg['stage'] != null && msg['stage'] != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }
//
//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.127.126:5000/merged");
//
//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to": selectedMessage != null
//               ? (selectedMessage!['question'] ??
//               selectedMessage!['response'] ??
//               selectedMessage!['user'] ??
//               selectedMessage!['message'] ??
//               "")
//               : "",
//         }),
//       );
//
//       final now = DateTime.now();
//
//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);
//
//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to': selectedMessage!['question'] ??
//                 selectedMessage!['response'] ??
//                 selectedMessage!['user'] ??
//                 selectedMessage!['message'],
//         };
//
//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'],
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'];
//           lastStage = newStage;
//
//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'],
//             'evolution': data['evolution'],
//             'growth': data['growth'],
//           };
//           await _storeMessage(msg);
//         }
//
//         selectedMessage = null;
//       } else {
//         setState(() => messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
//           'timestamp': now,
//         }));
//       }
//     } catch (e) {
//       setState(() => messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       }));
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }
//
//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }
//
//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp = msg['timestamp'] is Timestamp
//         ? (msg['timestamp'] as Timestamp).toDate()
//         : DateTime.now();
//
//     final List<Widget> chatWidgets = [];
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;
//
//     // User message
//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () => setState(() => selectedMessage = msg),
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 12, color: Colors.black87),
//                     ),
//                   ),
//                 Text(msg['user'], style: const TextStyle(color: Colors.black)),
//                 Text(DateFormat('hh:mm a').format(timestamp), style: const TextStyle(fontSize: 10)),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//
//     // Response
//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         GestureDetector(
//           onLongPress: () => setState(() => selectedMessage = msg),
//           child: Align(
//             alignment: Alignment.centerLeft,
//             child: Container(
//               margin: const EdgeInsets.symmetric(vertical: 6),
//               padding: const EdgeInsets.all(12),
//               decoration: BoxDecoration(
//                 color: Colors.grey[200],
//                 borderRadius: BorderRadius.circular(12),
//               ),
//               child: Text(msg['response']),
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         GestureDetector(
//           onLongPress: () => setState(() => selectedMessage = msg),
//           child: Align(
//             alignment: Alignment.centerLeft,
//             child: Container(
//               margin: const EdgeInsets.symmetric(vertical: 6),
//               padding: const EdgeInsets.all(14),
//               decoration: BoxDecoration(
//                 color: Colors.orange[100],
//                 borderRadius: BorderRadius.circular(16),
//               ),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
//                   const SizedBox(height: 6),
//                   Text("‚ùì ${msg['question']}", style: const TextStyle(fontStyle: FontStyle.italic, fontSize: 14)),
//                   if (msg['growth'] != null) ...[
//                     const SizedBox(height: 8),
//                     Text(msg['growth'], style: const TextStyle(fontSize: 13, fontStyle: FontStyle.italic, color: Colors.green)),
//                   ],
//                   if (msg['evolution'] != null) ...[
//                     const SizedBox(height: 8),
//                     Text(msg['evolution'], style: const TextStyle(color: Colors.green, fontWeight: FontWeight.w600)),
//                   ],
//                 ],
//               ),
//             ),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'error') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.red[100],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
//           ),
//         ),
//       );
//     }
//
//     return Column(children: chatWidgets);
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder: (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 if (selectedMessage != null)
//                   Container(
//                     margin: const EdgeInsets.symmetric(horizontal: 12),
//                     padding: const EdgeInsets.all(8),
//                     decoration: BoxDecoration(
//                       color: Colors.grey[300],
//                       borderRadius: BorderRadius.circular(8),
//                     ),
//                     child: Row(
//                       mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                       children: [
//                         Expanded(
//                           child: Text(
//                             "‚Ü™Ô∏è ${selectedMessage!['question'] ?? selectedMessage!['response'] ?? selectedMessage!['user'] ?? selectedMessage!['message']}",
//                             style: const TextStyle(fontSize: 12, fontStyle: FontStyle.italic),
//                             overflow: TextOverflow.ellipsis,
//                           ),
//                         ),
//                         IconButton(
//                           icon: const Icon(Icons.close),
//                           onPressed: () => setState(() => selectedMessage = null),
//                         )
//                       ],
//                     ),
//                   ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           maxLines: 2,
//                           minLines: 1,
//                           decoration: InputDecoration(
//                             hintText: "Type a message...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                           ),
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       ElevatedButton(
//                         onPressed: isLoading
//                             ? null
//                             : () {
//                           final text = _controller.text.trim();
//                           if (text.isNotEmpty) sendEntry(text);
//                         },
//                         style: ElevatedButton.styleFrom(
//                           shape: const CircleBorder(),
//                           padding: const EdgeInsets.all(14),
//                         ),
//                         child: isLoading
//                             ? const CircularProgressIndicator(strokeWidth: 2)
//                             : const Icon(Icons.send),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }
// üîÅ Merged Reflect + Voice Chat Screen with Firebase + Audio Playback

// Working
// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;

//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//     _requestPermissions();
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.144.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               "",
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode}',
//           'timestamp': now,
//         });
//       }
//     } catch (e) {
//       messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("‚ùå Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     final uri = Uri.parse("http://192.168.144.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri)
//       ..files.add(
//         await http.MultipartFile.fromPath(
//           'file',
//           file.path,
//           contentType: MediaType('audio', 'wav'),
//         ),
//       );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final jsonResp = json.decode(responseBody);

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final base = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//         };

//         if (jsonResp['mode'] == 'chat') {
//           await _storeMessage({
//             ...base,
//             'type': 'chat',
//             'response': jsonResp['response'] ?? '',
//           });
//         } else if (jsonResp['mode'] == 'spiral') {
//           lastStage = jsonResp['stage'] ?? '';
//           await _storeMessage({
//             ...base,
//             'type': 'spiral',
//             'stage': jsonResp['stage'] ?? '',
//             'question': jsonResp['question'] ?? '',
//             'evolution': '',
//             'growth': jsonResp['growth'] ?? '',
//           });
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Error sending audio: $e");
//     }
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : DateTime.now();

//     final List<Widget> chatWidgets = [];
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;

//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () => setState(() => selectedMessage = msg),
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(
//                         fontStyle: FontStyle.italic,
//                         fontSize: 12,
//                         color: Colors.black87,
//                       ),
//                     ),
//                   ),
//                 Text(
//                   msg['user'] ?? '',
//                   style: const TextStyle(color: Colors.black),
//                 ),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );

//     if (msg['user'] == '[Voice]' && msg['audioPath'] != null) {
//       chatWidgets.add(AudioPlayerWidget(filePath: msg['audioPath']));
//     }

//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text(msg['response'] ?? ''),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   "üåÄ Stage: ${msg['stage'] ?? ''}",
//                   style: const TextStyle(
//                     fontWeight: FontWeight.bold,
//                     fontSize: 16,
//                   ),
//                 ),
//                 const SizedBox(height: 6),
//                 Text(
//                   "‚ùì ${msg['question'] ?? ''}",
//                   style: const TextStyle(
//                     fontStyle: FontStyle.italic,
//                     fontSize: 14,
//                   ),
//                 ),
//                 if ((msg['growth'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['growth'],
//                       style: const TextStyle(
//                         fontSize: 13,
//                         fontStyle: FontStyle.italic,
//                         color: Colors.green,
//                       ),
//                     ),
//                   ),
//                 if ((msg['evolution'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['evolution'],
//                       style: const TextStyle(
//                         color: Colors.green,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ),
//               ],
//             ),
//           ),
//         ),
//       );
//     }

//     return Column(children: chatWidgets);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder:
//                         (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 10,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       await _player.setFilePath(widget.filePath);
//       await _player.play();
//     }

//     setState(() => _isPlaying = !_isPlaying);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow),
//           onPressed: _togglePlayPause,
//         ),
//         const Text("‚ñ∂Ô∏è Voice Note"),
//       ],
//     );
//   }
// }

// üìÅ MergedReflectScreen.dart

// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;

//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//     _requestPermissions();
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.144.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               "",
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode}',
//           'timestamp': now,
//         });
//       }
//     } catch (e) {
//       messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("‚ùå Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     final uri = Uri.parse("http://192.168.144.126:5000/reflect_transcription");

//     final request = http.MultipartRequest('POST', uri)
//       ..files.add(
//         await http.MultipartFile.fromPath(
//           'file',
//           file.path,
//           contentType: MediaType('audio', 'wav'),
//         ),
//       );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final jsonResp = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final List<dynamic> speakerBlocks = jsonResp['analysis'];

//         for (final block in speakerBlocks) {
//           final base = {
//             'user': '[Voice]',
//             'timestamp': now,
//             'audioPath': file.path,
//             'speaker': block['speaker'],
//             'text': block['text'],
//           };

//           if (block['intent'] == 'chat') {
//             await _storeMessage({
//               ...base,
//               'type': 'chat',
//               'response': block['response'] ?? '',
//             });
//           } else if (block['intent'] == 'spiral') {
//             lastStage = block['stage'] ?? '';
//             await _storeMessage({
//               ...base,
//               'type': 'spiral',
//               'stage': block['stage'] ?? '',
//               'question': block['question'] ?? '',
//               'evolution': '',
//               'growth': block['growth'] ?? '',
//             });
//           }
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Error sending audio: $e");
//     }
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : DateTime.now();

//     final List<Widget> chatWidgets = [];
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;

//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () => setState(() => selectedMessage = msg),
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(
//                         fontStyle: FontStyle.italic,
//                         fontSize: 12,
//                         color: Colors.black87,
//                       ),
//                     ),
//                   ),
//                 Text(
//                   msg['user'] ?? '',
//                   style: const TextStyle(color: Colors.black),
//                 ),
//                 if (msg['speaker'] != null)
//                   Text(
//                     msg['speaker'],
//                     style: const TextStyle(
//                       fontSize: 11,
//                       fontStyle: FontStyle.italic,
//                     ),
//                   ),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );

//     if (msg['user'] == '[Voice]' && msg['audioPath'] != null) {
//       chatWidgets.add(AudioPlayerWidget(filePath: msg['audioPath']));
//     }

//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text(msg['response'] ?? ''),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   "üåÄ Stage: ${msg['stage'] ?? ''}",
//                   style: const TextStyle(
//                     fontWeight: FontWeight.bold,
//                     fontSize: 16,
//                   ),
//                 ),
//                 const SizedBox(height: 6),
//                 Text(
//                   "‚ùì ${msg['question'] ?? ''}",
//                   style: const TextStyle(
//                     fontStyle: FontStyle.italic,
//                     fontSize: 14,
//                   ),
//                 ),
//                 if ((msg['growth'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['growth'],
//                       style: const TextStyle(
//                         fontSize: 13,
//                         fontStyle: FontStyle.italic,
//                         color: Colors.green,
//                       ),
//                     ),
//                   ),
//                 if ((msg['evolution'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['evolution'],
//                       style: const TextStyle(
//                         color: Colors.green,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ),
//               ],
//             ),
//           ),
//         ),
//       );
//     }

//     return Column(children: chatWidgets);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder:
//                         (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 10,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       await _player.setFilePath(widget.filePath);
//       await _player.play();
//     }

//     setState(() => _isPlaying = !_isPlaying);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow),
//           onPressed: _togglePlayPause,
//         ),
//         const Text("‚ñ∂Ô∏è Voice Note"),
//       ],
//     );
//   }
// }
// ‚úÖ This is the full modified file (merged_reflect_screen.dart)

// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;

//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//     _requestPermissions();
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.144.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               "",
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'task': data['task'] ?? '', // NEW: Add task from backend
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode}',
//           'timestamp': now,
//         });
//       }
//     } catch (e) {
//       messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("‚ùå Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     final uri = Uri.parse("http://192.168.144.126:5000/reflect_transcription");

//     final request =
//         http.MultipartRequest('POST', uri)
//           ..fields['last_stage'] = lastStage ?? ''
//           ..fields['reply_to'] =
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               ""
//           ..files.add(
//             await http.MultipartFile.fromPath(
//               'file',
//               file.path,
//               contentType: MediaType('audio', 'wav'),
//             ),
//           );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'text': data['transcription'] ?? '',
//           'type': data['mode'],
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'];
//         } else {
//           msg['stage'] = data['stage'];
//           msg['question'] = data['question'];
//           msg['growth'] = data['growth'];
//           msg['evolution'] = data['evolution'];
//           msg['task'] = data['task']; // NEW
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       debugPrint("‚ùå Error sending audio: $e");
//     }
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : DateTime.now();

//     final List<Widget> chatWidgets = [];
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;

//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () => setState(() => selectedMessage = msg),
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(
//                         fontStyle: FontStyle.italic,
//                         fontSize: 12,
//                         color: Colors.black87,
//                       ),
//                     ),
//                   ),
//                 Text(
//                   msg['user'] ?? '',
//                   style: const TextStyle(color: Colors.black),
//                 ),
//                 if (msg['speaker'] != null)
//                   Text(
//                     msg['speaker'],
//                     style: const TextStyle(
//                       fontSize: 11,
//                       fontStyle: FontStyle.italic,
//                     ),
//                   ),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );

//     if (msg['user'] == '[Voice]' && msg['audioPath'] != null) {
//       chatWidgets.add(AudioPlayerWidget(filePath: msg['audioPath']));
//     }

//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text(msg['response'] ?? ''),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   "üåÄ Stage: ${msg['stage'] ?? ''}",
//                   style: const TextStyle(
//                     fontWeight: FontWeight.bold,
//                     fontSize: 16,
//                   ),
//                 ),
//                 const SizedBox(height: 6),
//                 Text(
//                   "‚ùì ${msg['question'] ?? ''}",
//                   style: const TextStyle(
//                     fontStyle: FontStyle.italic,
//                     fontSize: 14,
//                   ),
//                 ),
//                 if ((msg['growth'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['growth'],
//                       style: const TextStyle(
//                         fontSize: 13,
//                         fontStyle: FontStyle.italic,
//                         color: Colors.green,
//                       ),
//                     ),
//                   ),
//                 if ((msg['evolution'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['evolution'],
//                       style: const TextStyle(
//                         color: Colors.green,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ),
//                 if ((msg['task'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       "üìå Task: ${msg['task']}",
//                       style: const TextStyle(color: Colors.purple),
//                     ),
//                   ),
//               ],
//             ),
//           ),
//         ),
//       );
//     }

//     return Column(children: chatWidgets);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder:
//                         (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 10,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       await _player.setFilePath(widget.filePath);
//       await _player.play();
//     }

//     setState(() => _isPlaying = !_isPlaying);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow),
//           onPressed: _togglePlayPause,
//         ),
//         const Text("‚ñ∂Ô∏è Voice Note"),
//       ],
//     );
//   }
// }
// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;

//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//     _requestPermissions();
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.144.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               "",
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'task': data['task'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode}',
//           'timestamp': now,
//         });
//       }
//     } catch (e) {
//       messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("‚ùå Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     final uri = Uri.parse("http://192.168.144.126:5000/reflect_transcription");

//     final request =
//         http.MultipartRequest('POST', uri)
//           ..fields['last_stage'] = lastStage ?? ''
//           ..fields['reply_to'] =
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               ""
//           ..files.add(
//             await http.MultipartFile.fromPath(
//               'file',
//               file.path,
//               contentType: MediaType('audio', 'wav'),
//             ),
//           );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'text': data['transcription'] ?? '',
//           'type': data['mode'],
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'];
//         } else {
//           msg['stage'] = data['stage'];
//           msg['question'] = data['question'];
//           msg['growth'] = data['growth'];
//           msg['evolution'] = data['evolution'];
//           msg['task'] = data['task'];
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       debugPrint("‚ùå Error sending audio: $e");
//     }
//   }

//   Widget? buildDailyTaskBanner() {
//     final recentTaskMessage =
//         messages
//             .where((m) => m['type'] == 'spiral' && (m['task'] ?? '').isNotEmpty)
//             .toList()
//             .reversed
//             .cast<Map<String, dynamic>>()
//             .firstOrNull;

//     if (recentTaskMessage == null) return null;

//     return Container(
//       width: double.infinity,
//       margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//       padding: const EdgeInsets.all(12),
//       decoration: BoxDecoration(
//         color: Colors.yellow[100],
//         borderRadius: BorderRadius.circular(16),
//         boxShadow: [
//           BoxShadow(color: Colors.black12, blurRadius: 4, offset: Offset(0, 2)),
//         ],
//       ),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           const Text(
//             "üåü Today‚Äôs Inner Task",
//             style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
//           ),
//           const SizedBox(height: 6),
//           Text(
//             recentTaskMessage['task'],
//             style: const TextStyle(
//               fontStyle: FontStyle.italic,
//               fontSize: 14,
//               color: Colors.black87,
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : DateTime.now();

//     final List<Widget> chatWidgets = [];
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;

//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () => setState(() => selectedMessage = msg),
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(
//                         fontStyle: FontStyle.italic,
//                         fontSize: 12,
//                         color: Colors.black87,
//                       ),
//                     ),
//                   ),
//                 Text(
//                   msg['user'] ?? '',
//                   style: const TextStyle(color: Colors.black),
//                 ),
//                 if (msg['speaker'] != null)
//                   Text(
//                     msg['speaker'],
//                     style: const TextStyle(
//                       fontSize: 11,
//                       fontStyle: FontStyle.italic,
//                     ),
//                   ),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );

//     if (msg['user'] == '[Voice]' && msg['audioPath'] != null) {
//       chatWidgets.add(AudioPlayerWidget(filePath: msg['audioPath']));
//     }

//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text(msg['response'] ?? ''),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   "üåÄ Stage: ${msg['stage'] ?? ''}",
//                   style: const TextStyle(
//                     fontWeight: FontWeight.bold,
//                     fontSize: 16,
//                   ),
//                 ),
//                 const SizedBox(height: 6),
//                 Text(
//                   "‚ùì ${msg['question'] ?? ''}",
//                   style: const TextStyle(
//                     fontStyle: FontStyle.italic,
//                     fontSize: 14,
//                   ),
//                 ),
//                 if ((msg['growth'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['growth'],
//                       style: const TextStyle(
//                         fontSize: 13,
//                         fontStyle: FontStyle.italic,
//                         color: Colors.green,
//                       ),
//                     ),
//                   ),
//                 if ((msg['evolution'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['evolution'],
//                       style: const TextStyle(
//                         color: Colors.green,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ),
//                 if ((msg['task'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       "üìå Task: ${msg['task']}",
//                       style: const TextStyle(color: Colors.purple),
//                     ),
//                   ),
//               ],
//             ),
//           ),
//         ),
//       );
//     }

//     return Column(children: chatWidgets);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 if (buildDailyTaskBanner() != null) buildDailyTaskBanner()!,
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder:
//                         (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 10,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       await _player.setFilePath(widget.filePath);
//       await _player.play();
//     }

//     setState(() => _isPlaying = !_isPlaying);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow),
//           onPressed: _togglePlayPause,
//         ),
//         const Text("‚ñ∂Ô∏è Voice Note"),
//       ],
//     );
//   }
// }

// import 'dart:convert';
// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:http/http.dart' as http;
// import 'package:intl/intl.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:permission_handler/permission_handler.dart';
// import 'package:record/record.dart' as record;
// import 'package:path/path.dart' as path;
// import 'package:http_parser/http_parser.dart';
// import 'package:just_audio/just_audio.dart';

// import '../data/bg_data.dart';
// import '../main.dart';
// import '../screens/task_history_screen.dart'; // ‚¨ÖÔ∏è This line was added

// class MergedReflectScreen extends StatefulWidget {
//   const MergedReflectScreen({super.key});

//   @override
//   State<MergedReflectScreen> createState() => _MergedReflectScreenState();
// }

// class _MergedReflectScreenState extends State<MergedReflectScreen> {
//   final _controller = TextEditingController();
//   final user = FirebaseAuth.instance.currentUser;
//   final firestore = FirebaseFirestore.instance;
//   bool isLoading = false;
//   List<Map<String, dynamic>> messages = [];
//   String? lastStage;
//   Map<String, dynamic>? selectedMessage;

//   final record.AudioRecorder _recorder = record.AudioRecorder();
//   bool _isRecording = false;

//   bool _taskExpanded = true;
//   Map<String, bool> completedTasks = {};

//   @override
//   void initState() {
//     super.initState();
//     _loadMessages();
//     _requestPermissions();
//     _loadCompletedTasks();
//   }

//   Future<void> _requestPermissions() async {
//     await [Permission.microphone, Permission.storage].request();
//   }

//   Future<void> _loadMessages() async {
//     final snapshot =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('mergedMessages')
//             .orderBy('timestamp')
//             .get();

//     setState(() {
//       messages =
//           snapshot.docs
//               .map((doc) => doc.data()..['id'] = doc.id)
//               .cast<Map<String, dynamic>>()
//               .toList();

//       for (final msg in messages.reversed) {
//         if (msg['type'] == 'spiral' && (msg['stage'] ?? '') != '') {
//           lastStage = msg['stage'];
//           break;
//         }
//       }
//     });
//   }

//   Future<void> _loadCompletedTasks() async {
//     final doc =
//         await firestore
//             .collection('users')
//             .doc(user!.uid)
//             .collection('taskCompletion')
//             .doc('completed')
//             .get();

//     if (doc.exists) {
//       final data = doc.data();
//       if (data != null) {
//         setState(() {
//           completedTasks = Map<String, bool>.from(data);
//         });
//       }
//     }
//   }

//   Future<void> _markTaskComplete(String stage, String dateKey) async {
//     final key = '$dateKey|$stage';
//     setState(() {
//       completedTasks[key] = true;
//     });

//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('taskCompletion')
//         .doc('completed')
//         .set({key: true}, SetOptions(merge: true));
//   }

//   Future<void> sendEntry(String entry) async {
//     if (entry.trim().isEmpty) return;
//     setState(() => isLoading = true);
//     final url = Uri.parse("http://192.168.144.126:5000/merged");

//     try {
//       final response = await http.post(
//         url,
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode({
//           "text": entry,
//           "last_stage": lastStage ?? "",
//           "reply_to":
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               "",
//         }),
//       );

//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final data = jsonDecode(response.body);

//         final base = {
//           'user': entry,
//           'timestamp': now,
//           if (selectedMessage != null)
//             'reply_to':
//                 selectedMessage?['question'] ??
//                 selectedMessage?['response'] ??
//                 selectedMessage?['user'] ??
//                 selectedMessage?['message'] ??
//                 "",
//         };

//         if (data['mode'] == 'chat') {
//           final msg = {
//             ...base,
//             'type': 'chat',
//             'response': data['response'] ?? '',
//           };
//           await _storeMessage(msg);
//         } else if (data['mode'] == 'spiral') {
//           final newStage = data['stage'] ?? '';
//           lastStage = newStage;

//           final msg = {
//             ...base,
//             'type': 'spiral',
//             'stage': newStage,
//             'question': data['question'] ?? '',
//             'evolution': data['evolution'] ?? '',
//             'growth': data['growth'] ?? '',
//             'task': data['task'] ?? '',
//           };
//           await _storeMessage(msg);
//         }

//         selectedMessage = null;
//       } else {
//         messages.add({
//           'type': 'error',
//           'message': 'Server error: ${response.statusCode}',
//           'timestamp': now,
//         });
//       }
//     } catch (e) {
//       messages.add({
//         'type': 'error',
//         'message': 'Network error: ${e.toString()}',
//         'timestamp': DateTime.now(),
//       });
//     } finally {
//       setState(() {
//         isLoading = false;
//         _controller.clear();
//       });
//     }
//   }

//   Future<void> _storeMessage(Map<String, dynamic> msg) async {
//     await firestore
//         .collection('users')
//         .doc(user!.uid)
//         .collection('mergedMessages')
//         .add(msg);
//     setState(() => messages.add(msg));
//   }

//   Future<String> _getTempFilePath() async {
//     final dir = await getTemporaryDirectory();
//     return path.join(dir.path, 'journal.wav');
//   }

//   Future<void> _startRecording() async {
//     final filePath = await _getTempFilePath();
//     final hasPermission = await _recorder.hasPermission();
//     if (!hasPermission) return;

//     try {
//       await _recorder.start(
//         const record.RecordConfig(
//           encoder: record.AudioEncoder.wav,
//           sampleRate: 16000,
//           numChannels: 1,
//         ),
//         path: filePath,
//       );
//       setState(() => _isRecording = true);
//     } catch (e) {
//       debugPrint("‚ùå Failed to start recording: $e");
//     }
//   }

//   Future<void> _stopRecording() async {
//     try {
//       final filePath = await _recorder.stop();
//       setState(() => _isRecording = false);

//       if (filePath != null) {
//         final file = File(filePath);
//         if (await file.exists() && await file.length() > 0) {
//           await _sendVoiceToBackend(file);
//         }
//       }
//     } catch (e) {
//       debugPrint("‚ùå Failed to stop recording: $e");
//     }
//   }

//   Future<void> _sendVoiceToBackend(File file) async {
//     final uri = Uri.parse("http://192.168.144.126:5000/reflect_transcription");

//     final request =
//         http.MultipartRequest('POST', uri)
//           ..fields['last_stage'] = lastStage ?? ''
//           ..fields['reply_to'] =
//               selectedMessage?['question'] ??
//               selectedMessage?['response'] ??
//               selectedMessage?['user'] ??
//               selectedMessage?['message'] ??
//               ""
//           ..files.add(
//             await http.MultipartFile.fromPath(
//               'file',
//               file.path,
//               contentType: MediaType('audio', 'wav'),
//             ),
//           );

//     try {
//       final response = await request.send();
//       final responseBody = await response.stream.bytesToString();
//       final data = json.decode(responseBody);
//       final now = DateTime.now();

//       if (response.statusCode == 200) {
//         final msg = {
//           'user': '[Voice]',
//           'timestamp': now,
//           'audioPath': file.path,
//           'text': data['transcription'] ?? '',
//           'type': data['mode'],
//         };

//         if (data['mode'] == 'chat') {
//           msg['response'] = data['response'];
//         } else {
//           msg['stage'] = data['stage'];
//           msg['question'] = data['question'];
//           msg['growth'] = data['growth'];
//           msg['evolution'] = data['evolution'];
//           msg['task'] = data['task'];
//           lastStage = data['stage'];
//         }

//         await _storeMessage(msg);
//       }
//     } catch (e) {
//       debugPrint("‚ùå Error sending audio: $e");
//     }
//   }

//   Widget? buildDailyTaskBanner() {
//     final recentTaskMessage =
//         messages
//             .where((m) => m['type'] == 'spiral' && (m['task'] ?? '').isNotEmpty)
//             .toList()
//             .reversed
//             .cast<Map<String, dynamic>>()
//             .firstOrNull;

//     if (recentTaskMessage == null) return null;

//     final stage = recentTaskMessage['stage'];
//     final dateKey = DateFormat('yyyy-MM-dd').format(DateTime.now());
//     final taskCompleted = completedTasks['$dateKey|$stage'] ?? false;

//     return GestureDetector(
//       onTap: () => setState(() => _taskExpanded = !_taskExpanded),
//       child: Container(
//         width: double.infinity,
//         margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
//         padding: const EdgeInsets.all(12),
//         decoration: BoxDecoration(
//           color: Colors.yellow[100],
//           borderRadius: BorderRadius.circular(16),
//           boxShadow: [
//             BoxShadow(
//               color: Colors.black12,
//               blurRadius: 4,
//               offset: Offset(0, 2),
//             ),
//           ],
//         ),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Row(
//               mainAxisAlignment: MainAxisAlignment.spaceBetween,
//               children: [
//                 const Text(
//                   "üåü Today‚Äôs Inner Task",
//                   style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
//                 ),
//                 Icon(_taskExpanded ? Icons.expand_less : Icons.expand_more),
//               ],
//             ),
//             if (_taskExpanded) ...[
//               const SizedBox(height: 6),
//               Text(
//                 recentTaskMessage['task'],
//                 style: const TextStyle(
//                   fontStyle: FontStyle.italic,
//                   fontSize: 14,
//                   color: Colors.black87,
//                 ),
//               ),
//               Row(
//                 children: [
//                   Checkbox(
//                     value: taskCompleted,
//                     onChanged:
//                         taskCompleted
//                             ? null
//                             : (val) => _markTaskComplete(stage, dateKey),
//                   ),
//                   const Text("Mark as Completed"),
//                 ],
//               ),
//             ],
//           ],
//         ),
//       ),
//     );
//   }

//   Widget buildChatBubble(Map<String, dynamic> msg) {
//     final timestamp =
//         msg['timestamp'] is Timestamp
//             ? (msg['timestamp'] as Timestamp).toDate()
//             : DateTime.now();

//     final List<Widget> chatWidgets = [];
//     final replyText = msg['reply_to'] != null ? "‚Ü™Ô∏è ${msg['reply_to']}" : null;

//     chatWidgets.add(
//       GestureDetector(
//         onLongPress: () => setState(() => selectedMessage = msg),
//         child: Align(
//           alignment: Alignment.centerRight,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.blue[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.end,
//               children: [
//                 if (replyText != null)
//                   Padding(
//                     padding: const EdgeInsets.only(bottom: 4),
//                     child: Text(
//                       replyText,
//                       style: const TextStyle(
//                         fontStyle: FontStyle.italic,
//                         fontSize: 12,
//                         color: Colors.black87,
//                       ),
//                     ),
//                   ),
//                 Text(
//                   msg['user'] ?? '',
//                   style: const TextStyle(color: Colors.black),
//                 ),
//                 if (msg['speaker'] != null)
//                   Text(
//                     msg['speaker'],
//                     style: const TextStyle(
//                       fontSize: 11,
//                       fontStyle: FontStyle.italic,
//                     ),
//                   ),
//                 Text(
//                   DateFormat('hh:mm a').format(timestamp),
//                   style: const TextStyle(fontSize: 10),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );

//     if (msg['user'] == '[Voice]' && msg['audioPath'] != null) {
//       chatWidgets.add(AudioPlayerWidget(filePath: msg['audioPath']));
//     }

//     if (msg['type'] == 'chat') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(12),
//             decoration: BoxDecoration(
//               color: Colors.grey[200],
//               borderRadius: BorderRadius.circular(12),
//             ),
//             child: Text(msg['response'] ?? ''),
//           ),
//         ),
//       );
//     } else if (msg['type'] == 'spiral') {
//       chatWidgets.add(
//         Align(
//           alignment: Alignment.centerLeft,
//           child: Container(
//             margin: const EdgeInsets.symmetric(vertical: 6),
//             padding: const EdgeInsets.all(14),
//             decoration: BoxDecoration(
//               color: Colors.orange[100],
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   "üåÄ Stage: ${msg['stage'] ?? ''}",
//                   style: const TextStyle(
//                     fontWeight: FontWeight.bold,
//                     fontSize: 16,
//                   ),
//                 ),
//                 const SizedBox(height: 6),
//                 Text(
//                   "‚ùì ${msg['question'] ?? ''}",
//                   style: const TextStyle(
//                     fontStyle: FontStyle.italic,
//                     fontSize: 14,
//                   ),
//                 ),
//                 if ((msg['growth'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['growth'],
//                       style: const TextStyle(
//                         fontSize: 13,
//                         fontStyle: FontStyle.italic,
//                         color: Colors.green,
//                       ),
//                     ),
//                   ),
//                 if ((msg['evolution'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       msg['evolution'],
//                       style: const TextStyle(
//                         color: Colors.green,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ),
//                 if ((msg['task'] ?? '').isNotEmpty)
//                   Padding(
//                     padding: const EdgeInsets.only(top: 8),
//                     child: Text(
//                       "üìå Task: ${msg['task']}",
//                       style: const TextStyle(color: Colors.purple),
//                     ),
//                   ),
//               ],
//             ),
//           ),
//         ),
//       );
//     }

//     return Column(children: chatWidgets);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text("Reflect & Chat"),
//         actions: [
//           IconButton(
//             icon: const Icon(Icons.history),
//             onPressed: () {
//               Navigator.push(
//                 context,
//                 MaterialPageRoute(
//                   builder: (context) => const TaskHistoryScreen(),
//                 ),
//               );
//             },
//           ),
//         ],
//       ),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 if (buildDailyTaskBanner() != null) buildDailyTaskBanner()!,
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder:
//                         (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 10,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }

// class AudioPlayerWidget extends StatefulWidget {
//   final String filePath;
//   const AudioPlayerWidget({super.key, required this.filePath});

//   @override
//   State<AudioPlayerWidget> createState() => _AudioPlayerWidgetState();
// }

// class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
//   final AudioPlayer _player = AudioPlayer();
//   bool _isPlaying = false;

//   @override
//   void dispose() {
//     _player.dispose();
//     super.dispose();
//   }

//   Future<void> _togglePlayPause() async {
//     if (_isPlaying) {
//       await _player.pause();
//     } else {
//       await _player.setFilePath(widget.filePath);
//       await _player.play();
//     }

//     setState(() => _isPlaying = !_isPlaying);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow),
//           onPressed: _togglePlayPause,
//         ),
//         const Text("‚ñ∂Ô∏è Voice Note"),
//       ],
//     );
//   }
// }
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text("Reflect & Chat"),
//         actions: [
//           IconButton(
//             icon: const Icon(Icons.history),
//             onPressed: () {
//               Navigator.push(
//                 context,
//                 MaterialPageRoute(
//                   builder: (context) => const TaskHistoryScreen(),
//                 ),
//               );
//             },
//           ),
//         ],
//       ),

//       appBar: AppBar(title: const Text("Reflect & Chat")),
//       body: ValueListenableBuilder<int>(
//         valueListenable: selectedBgIndex,
//         builder: (context, index, _) {
//           return Container(
//             decoration: BoxDecoration(
//               image: DecorationImage(
//                 image: AssetImage(bgList[index]),
//                 fit: BoxFit.cover,
//               ),
//             ),
//             child: Column(
//               children: [
//                 if (buildDailyTaskBanner() != null) buildDailyTaskBanner()!,
//                 Expanded(
//                   child: ListView.builder(
//                     padding: const EdgeInsets.all(12),
//                     itemCount: messages.length,
//                     itemBuilder:
//                         (context, index) => buildChatBubble(messages[index]),
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 10,
//                   ),
//                   child: Row(
//                     children: [
//                       Expanded(
//                         child: TextField(
//                           controller: _controller,
//                           decoration: InputDecoration(
//                             hintText: "Type your reflection...",
//                             filled: true,
//                             fillColor: Colors.white,
//                             border: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide.none,
//                             ),
//                             contentPadding: const EdgeInsets.symmetric(
//                               horizontal: 16,
//                               vertical: 12,
//                             ),
//                           ),
//                           minLines: 1,
//                           maxLines: 5,
//                         ),
//                       ),
//                       const SizedBox(width: 8),
//                       IconButton(
//                         icon: Icon(
//                           _isRecording ? Icons.stop_circle_outlined : Icons.mic,
//                           color: _isRecording ? Colors.red : Colors.black,
//                         ),
//                         onPressed:
//                             _isRecording ? _stopRecording : _startRecording,
//                       ),
//                       IconButton(
//                         icon: const Icon(Icons.send),
//                         onPressed:
//                             isLoading
//                                 ? null
//                                 : () => sendEntry(_controller.text),
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }
// ignore_for_file: use_build_context_synchronously
