main.dart:

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'data/bg_data.dart';
import 'screens/login_screen.dart';
import 'screens/register_screen.dart';
import 'screens/home_screen.dart';
import 'screens/merged_reflect_screen.dart';
import 'screens/voice_journal_screen.dart';

final ValueNotifier<int> selectedBgIndex = ValueNotifier<int>(0);

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder(
      valueListenable: selectedBgIndex,
      builder: (context, index, _) {
        return MaterialApp(
          debugShowCheckedModeBanner: false,
          title: 'RETVRN',
          home: const LoginScreen(),
          routes: {
            '/login': (_) => const LoginScreen(),
            '/register': (_) => const RegisterScreen(),
            '/home': (_) => const HomeScreen(),
            '/chat': (_) => const MergedReflectScreen(),
            '/voice': (_) => const VoiceJournalScreen(),
          },
        );
      },
    );
  }
}

merged_reflect_screen.dart:
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../data/bg_data.dart';
import '../main.dart';

class MergedReflectScreen extends StatefulWidget {
  const MergedReflectScreen({super.key});

  @override
  State<MergedReflectScreen> createState() => _MergedReflectScreenState();
}

class _MergedReflectScreenState extends State<MergedReflectScreen> {
  final _controller = TextEditingController();
  final user = FirebaseAuth.instance.currentUser;
  final firestore = FirebaseFirestore.instance;
  bool isLoading = false;
  List<Map<String, dynamic>> messages = [];

  @override
  void initState() {
    super.initState();
    _loadMessages();
  }

  Future<void> _loadMessages() async {
    final snapshot = await firestore
        .collection('users')
        .doc(user!.uid)
        .collection('mergedMessages')
        .orderBy('timestamp')
        .get();

    setState(() {
      messages = snapshot.docs
          .map((doc) => doc.data()..['id'] = doc.id)
          .cast<Map<String, dynamic>>()
          .toList();
    });
  }

  Future<void> sendEntry(String entry) async {
    setState(() => isLoading = true);
    final url = Uri.parse("http://192.168.127.126:5000/merged"); // ‚úÖ Replace with your IP

    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"text": entry}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final now = DateTime.now();

        if (data['mode'] == 'chat') {
          final msg = {
            'type': 'chat',
            'user': entry,
            'response': data['response'],
            'timestamp': now,
          };
          await _storeMessage(msg);
        } else if (data['mode'] == 'spiral') {
          final msg = {
            'type': 'spiral',
            'user': entry,
            'stage': data['stage'],
            'values_summary': data['values_summary'],
            'shadow': data['shadow'],
            'portal_prompt': data['portal_prompt'],
            'badge': data['badge'],
            'stage_index': data['stage_index'],
            'timestamp': now,
          };
          await _storeMessage(msg);
        }
      } else {
        print("‚ùå Server error: ${response.statusCode}");
        print("üîç Body: ${response.body}");
        setState(() => messages.add({
          'type': 'error',
          'message': 'Server error: ${response.statusCode} ‚Äì ${response.reasonPhrase}',
          'timestamp': DateTime.now(),
        }));
      }
    } catch (e) {
      print('‚ùå Network error: $e');
      setState(() => messages.add({
        'type': 'error',
        'message': 'Network error: ${e.toString()}',
        'timestamp': DateTime.now(),
      }));
    } finally {
      setState(() {
        isLoading = false;
        _controller.clear();
      });
    }
  }

  Future<void> _storeMessage(Map<String, dynamic> msg) async {
    await firestore
        .collection('users')
        .doc(user!.uid)
        .collection('mergedMessages')
        .add(msg);
    setState(() => messages.add(msg));
  }

  Widget buildChatBubble(Map<String, dynamic> msg) {
    final timestamp = msg['timestamp'] is Timestamp
        ? (msg['timestamp'] as Timestamp).toDate()
        : DateTime.now();

    final List<Widget> chatWidgets = [];

    // USER MESSAGE (right aligned)
    chatWidgets.add(
      Align(
        alignment: Alignment.centerRight,
        child: Container(
          margin: const EdgeInsets.symmetric(vertical: 6),
          padding: const EdgeInsets.all(12),
          constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
          decoration: BoxDecoration(
            color: Colors.blue[200],
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(msg['user'], style: const TextStyle(color: Colors.black)),
              const SizedBox(height: 4),
              Text(
                DateFormat('hh:mm a').format(timestamp),
                style: const TextStyle(fontSize: 10, color: Colors.black54),
              ),
            ],
          ),
        ),
      ),
    );

    // SYSTEM RESPONSE (left aligned)
    if (msg['type'] == 'chat') {
      chatWidgets.add(
        Align(
          alignment: Alignment.centerLeft,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 6),
            padding: const EdgeInsets.all(12),
            constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.75),
            decoration: BoxDecoration(
              color: Colors.grey[200],
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(msg['response'], style: const TextStyle(color: Colors.black)),
                const SizedBox(height: 4),
                Text(
                  DateFormat('hh:mm a').format(timestamp),
                  style: const TextStyle(fontSize: 10, color: Colors.black54),
                ),
              ],
            ),
          ),
        ),
      );
    } else if (msg['type'] == 'spiral') {
      chatWidgets.add(
        Align(
          alignment: Alignment.centerLeft,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 6),
            padding: const EdgeInsets.all(12),
            constraints: BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.85),
            decoration: BoxDecoration(
              color: Colors.orange[100],
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text("üåÄ Stage: ${msg['stage']}", style: const TextStyle(fontWeight: FontWeight.bold)),
                Text("üåü Values: ${msg['values_summary']}"),
                Text("‚ö†Ô∏è Shadow: ${msg['shadow']}"),
                const SizedBox(height: 6),
                Text("ü™¨ Portal Prompt: ${msg['portal_prompt']}", style: const TextStyle(fontStyle: FontStyle.italic)),
                Text("üèÖ Badge: ${msg['badge']}"),
                const SizedBox(height: 4),
                Text(
                  DateFormat('hh:mm a').format(timestamp),
                  style: const TextStyle(fontSize: 10, color: Colors.black54),
                ),
              ],
            ),
          ),
        ),
      );
    } else if (msg['type'] == 'error') {
      chatWidgets.add(
        Align(
          alignment: Alignment.centerLeft,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 6),
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.red[100],
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text("‚ùå ${msg['message']}", style: const TextStyle(color: Colors.red)),
          ),
        ),
      );
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: chatWidgets,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Reflect & Chat')),
      body: ValueListenableBuilder<int>(
        valueListenable: selectedBgIndex,
        builder: (context, index, _) {
          return Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage(bgList[index]),
                fit: BoxFit.cover,
              ),
            ),
            child: Column(
              children: [
                Expanded(
                  child: ListView.builder(
                    reverse: false,
                    padding: const EdgeInsets.all(12),
                    itemCount: messages.length,
                    itemBuilder: (context, index) => buildChatBubble(messages[index]),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  child: Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _controller,
                          maxLines: 2,
                          minLines: 1,
                          decoration: InputDecoration(
                            hintText: "Type a message...",
                            filled: true,
                            fillColor: Colors.white,
                            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(30),
                              borderSide: BorderSide.none,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      ElevatedButton(
                        onPressed: isLoading
                            ? null
                            : () {
                          final text = _controller.text.trim();
                          if (text.isNotEmpty) sendEntry(text);
                        },
                        style: ElevatedButton.styleFrom(
                          shape: const CircleBorder(),
                          padding: const EdgeInsets.all(14),
                        ),
                        child: isLoading
                            ? const CircularProgressIndicator(strokeWidth: 2)
                            : const Icon(Icons.send),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
      floatingActionButton: SizedBox(
        height: 80,
        child: Row(
          children: [
            Expanded(
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: bgList.length,
                itemBuilder: (context, index) {
                  return GestureDetector(
                    onTap: () => selectedBgIndex.value = index,
                    child: CircleAvatar(
                      backgroundImage: AssetImage(bgList[index]),
                      radius: 30,
                      backgroundColor: selectedBgIndex.value == index
                          ? Colors.white
                          : Colors.transparent,
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
login_screen.dart:

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../data/bg_data.dart';
import '../main.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});
  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _loading = false;

  Future<void> _signInWithEmail() async {
    setState(() => _loading = true);
    try {
      await _auth.signInWithEmailAndPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );
      Navigator.pushReplacementNamed(context, '/home');
    } on FirebaseAuthException catch (e) {
      _showError(e.message ?? 'Login failed');
    } finally {
      setState(() => _loading = false);
    }
  }

  Future<void> _signInWithGoogle() async {
    setState(() => _loading = true);
    try {
      final googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return;
      final auth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: auth.accessToken,
        idToken: auth.idToken,
      );
      await _auth.signInWithCredential(credential);
      Navigator.pushReplacementNamed(context, '/home');
    } on FirebaseAuthException catch (e) {
      _showError(e.message ?? 'Google sign-in failed');
    } finally {
      setState(() => _loading = false);
    }
  }

  void _showError(String msg) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  static const Color whiteShade = Colors.white;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ValueListenableBuilder<int>(
        valueListenable: selectedBgIndex,
        builder: (_, index, __) {
          return Stack(
            fit: StackFit.expand,
            children: [
              Image.asset(bgList[index], fit: BoxFit.cover),
              Container(color: Colors.black.withOpacity(0.5)),
              Center(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.symmetric(horizontal: 32),
                  child: Card(
                    color: Colors.white.withOpacity(0.15),
                    elevation: 8,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                    child: Padding(
                      padding: const EdgeInsets.all(24),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const Text(
                            'Welcome Back!',
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: whiteShade,
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 32),
                          _buildTextField(_emailController, 'Email'),
                          const SizedBox(height: 16),
                          _buildTextField(_passwordController, 'Password', obscure: true),
                          const SizedBox(height: 24),
                          _buildButton('Login', _signInWithEmail),
                          const SizedBox(height: 12),
                          _buildButton('Sign in with Google', _signInWithGoogle, icon: Icons.login),
                          const SizedBox(height: 24),
                          TextButton(
                            onPressed: () =>
                                Navigator.pushReplacementNamed(context, '/register'),
                            child: const Text(
                              'Don\'t have an account? Sign up',
                              style: TextStyle(color: whiteShade),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
              _buildBackgroundSelector(),
            ],
          );
        },
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label,
      {bool obscure = false}) {
    return TextField(
      controller: controller,
      obscureText: obscure,
      style: const TextStyle(color: whiteShade), // White text color for input
      decoration: InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(color: whiteShade), // White label color
        filled: true,
        fillColor: Colors.white.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  Widget _buildButton(String text, VoidCallback onPressed, {IconData? icon}) {
    return ElevatedButton.icon(
      onPressed: _loading ? null : onPressed,
      icon: icon != null ? Icon(icon, color: Colors.black) : const SizedBox.shrink(),
      label: _loading
          ? const SizedBox(
        width: 20,
        height: 20,
        child: CircularProgressIndicator(color: Colors.black, strokeWidth: 2),
      )
          : Text(text),
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.black,
        backgroundColor: Colors.white,
        minimumSize: const Size(double.infinity, 50),
        textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  Widget _buildBackgroundSelector() {
    return Positioned(
      bottom: 16,
      left: 0,
      right: 0,
      height: 60,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: bgList.length,
        padding: const EdgeInsets.symmetric(horizontal: 16),
        itemBuilder: (_, i) {
          final selected = selectedBgIndex.value == i;
          return GestureDetector(
            onTap: () => selectedBgIndex.value = i,
            child: Container(
              margin: const EdgeInsets.symmetric(horizontal: 8),
              decoration: BoxDecoration(
                border: selected
                    ? Border.all(color: Colors.white, width: 3)
                    : null,
                shape: BoxShape.circle,
              ),
              child: CircleAvatar(
                radius: 28,
                backgroundImage: AssetImage(bgList[i]),
              ),
            ),
          );
        },
      ),
    );
  }
}
register_screen.dart:
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../data/bg_data.dart';
import '../main.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _loading = false;

  Future<void> _registerWithEmail() async {
    setState(() => _loading = true);
    try {
      await _auth.createUserWithEmailAndPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );
      Navigator.pushReplacementNamed(context, '/home');
    } on FirebaseAuthException catch (e) {
      _showError(e.message ?? 'Registration failed');
    } finally {
      setState(() => _loading = false);
    }
  }

  Future<void> _registerWithGoogle() async {
    setState(() => _loading = true);
    try {
      final googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return;

      final auth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: auth.accessToken,
        idToken: auth.idToken,
      );

      await _auth.signInWithCredential(credential);
      Navigator.pushReplacementNamed(context, '/home');
    } on FirebaseAuthException catch (e) {
      _showError(e.message ?? 'Google registration failed');
    } finally {
      setState(() => _loading = false);
    }
  }

  void _showError(String msg) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  static const whiteShade = Colors.white;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ValueListenableBuilder<int>(
        valueListenable: selectedBgIndex,
        builder: (_, index, __) {
          return Stack(
            fit: StackFit.expand,
            children: [
              Image.asset(bgList[index], fit: BoxFit.cover),
              Container(color: Colors.black.withOpacity(0.5)),
              Center(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.symmetric(horizontal: 32),
                  child: Card(
                    color: Colors.white.withOpacity(0.15),
                    elevation: 8,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                    child: Padding(
                      padding: const EdgeInsets.all(24),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const Text(
                            'Create Account',
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: whiteShade,
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 32),
                          _buildTextField(_emailController, 'Email'),
                          const SizedBox(height: 16),
                          _buildTextField(_passwordController, 'Password', obscure: true),
                          const SizedBox(height: 24),
                          _buildButton('Register', _registerWithEmail),
                          const SizedBox(height: 12),
                          _buildButton('Register with Google', _registerWithGoogle, icon: Icons.login),
                          const SizedBox(height: 24),
                          TextButton(
                            onPressed: () =>
                                Navigator.pushReplacementNamed(context, '/login'),
                            child: const Text(
                              'Already have an account? Login',
                              style: TextStyle(color: whiteShade),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
              _buildBackgroundSelector(),
            ],
          );
        },
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label,
      {bool obscure = false}) {
    return TextField(
      controller: controller,
      obscureText: obscure,
      style: const TextStyle(color: whiteShade),
      decoration: InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(color: whiteShade),
        filled: true,
        fillColor: Colors.white.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  Widget _buildButton(String text, VoidCallback onPressed, {IconData? icon}) {
    return ElevatedButton.icon(
      onPressed: _loading ? null : onPressed,
      icon: icon != null ? Icon(icon, color: Colors.black) : const SizedBox.shrink(),
      label: _loading
          ? const SizedBox(
        width: 20,
        height: 20,
        child: CircularProgressIndicator(color: Colors.black, strokeWidth: 2),
      )
          : Text(text),
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.black,
        backgroundColor: Colors.white,
        minimumSize: const Size(double.infinity, 50),
        textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  Widget _buildBackgroundSelector() {
    return Positioned(
      bottom: 16,
      left: 0,
      right: 0,
      height: 60,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: bgList.length,
        padding: const EdgeInsets.symmetric(horizontal: 16),
        itemBuilder: (_, i) {
          final selected = selectedBgIndex.value == i;
          return GestureDetector(
            onTap: () => selectedBgIndex.value = i,
            child: Container(
              margin: const EdgeInsets.symmetric(horizontal: 8),
              decoration: BoxDecoration(
                border: selected ? Border.all(color: Colors.white, width: 3) : null,
                shape: BoxShape.circle,
              ),
              child: CircleAvatar(
                radius: 28,
                backgroundImage: AssetImage(bgList[i]),
              ),
            ),
          );
        },
      ),
    );
  }
}
home_screen.dart:
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../data/bg_data.dart';
import '../main.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  User? user;

  @override
  void initState() {
    super.initState();
    user = FirebaseAuth.instance.currentUser;

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _maybeAskForName();
    });
  }

  Future<void> _maybeAskForName() async {
    if (user != null && (user!.displayName == null || user!.displayName!.isEmpty)) {
      final name = await _promptForName();
      if (name != null && name.trim().isNotEmpty) {
        await user!.updateDisplayName(name.trim());
        await user!.reload();
        user = FirebaseAuth.instance.currentUser;
        setState(() {});
      }
    }
  }

  Future<String?> _promptForName() async {
    String enteredName = '';
    return showDialog<String>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        title: const Text("Hi there! üëã"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text("What should we call you?"),
            const SizedBox(height: 12),
            TextField(
              autofocus: true,
              decoration: InputDecoration(
                hintText: "Your name",
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                filled: true,
              ),
              onChanged: (value) => enteredName = value,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(enteredName),
            child: const Text("Continue"),
          ),
        ],
      ),
    );
  }

  Future<void> _logout() async {
    await FirebaseAuth.instance.signOut();
    await GoogleSignIn().signOut();
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    final displayName = user?.displayName;

    return Scaffold(
      body: ValueListenableBuilder(
        valueListenable: selectedBgIndex,
        builder: (_, index, __) {
          return Stack(
            children: [
              Positioned.fill(
                child: Image.asset(bgList[index], fit: BoxFit.cover),
              ),
              Positioned.fill(
                child: Container(
                  color: Colors.black.withOpacity(0.5),
                ),
              ),
              SafeArea(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Align(
                        alignment: Alignment.topRight,
                        child: IconButton(
                          icon: const Icon(Icons.logout, color: Colors.white),
                          onPressed: _logout,
                          tooltip: 'Logout',
                        ),
                      ),
                      const SizedBox(height: 20),
                      CircleAvatar(
                        radius: 45,
                        backgroundColor: Colors.white.withOpacity(0.2),
                        child: Text(
                          displayName?.isNotEmpty == true
                              ? displayName![0].toUpperCase()
                              : (user?.email?[0].toUpperCase() ?? 'U'),
                          style: const TextStyle(
                            fontSize: 36,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        displayName?.isNotEmpty == true
                            ? 'Welcome, $displayName!'
                            : 'Welcome!',
                        style: const TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 30),

                      /// --- Start Buttons in Cards ---
                      Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                        elevation: 6,
                        margin: const EdgeInsets.symmetric(vertical: 10),
                        color: Colors.white.withOpacity(0.85),
                        child: ListTile(
                          leading: const Icon(Icons.chat, color: Colors.indigo),
                          title: const Text(
                            "Open Reflection Chat",
                            style: TextStyle(fontWeight: FontWeight.w600),
                          ),
                          onTap: () => Navigator.pushNamed(context, '/chat'),
                        ),
                      ),
                      Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                        elevation: 6,
                        margin: const EdgeInsets.symmetric(vertical: 10),
                        color: Colors.white.withOpacity(0.85),
                        child: ListTile(
                          leading: const Icon(Icons.mic, color: Colors.deepOrange),
                          title: const Text(
                            "Open Voice Journal",
                            style: TextStyle(fontWeight: FontWeight.w600),
                          ),
                          onTap: () => Navigator.pushNamed(context, '/voice'),
                        ),
                      ),
                      /// --- End Buttons in Cards ---

                      const Spacer(),
                      const Text(
                        "Choose Background",
                        style: TextStyle(color: Colors.white70, fontSize: 14),
                      ),
                      const SizedBox(height: 10),
                    ],
                  ),
                ),
              ),
            ],
          );
        },
      ),
      floatingActionButton: SizedBox(
        height: 80,
        child: Row(
          children: [
            Expanded(
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: bgList.length,
                itemBuilder: (_, i) {
                  return GestureDetector(
                    onTap: () => selectedBgIndex.value = i,
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 6),
                      child: CircleAvatar(
                        backgroundImage: AssetImage(bgList[i]),
                        radius: 30,
                        backgroundColor: selectedBgIndex.value == i
                            ? Colors.white
                            : Colors.transparent,
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
